<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<alignment xmlns="http://www.esdi-humboldt.eu/hale/alignment">
    <customFunction>
        <cf:custom-property-function xmlns:cf="http://www.esdi-humboldt.eu/hale/custom-function" identifier="adv.geometry.simplefeature" name="Simple Feature Geometrie" type="groovy">
            <cf:input eager="true" maxOccurs="1" minOccurs="1" name="geometrie"/>
            <cf:output eager="false" maxOccurs="1" minOccurs="1"/>
            <cf:definition>
                <core:text xmlns:core="http://www.esdi-humboldt.eu/hale/core" xml:space="preserve">
def geoms = _.geom.toSimpleGeometries(geometries: _.geom.aggregate(geometrie), collections: false)
if (geoms) {
	if (geoms.size() &gt; 1) {
		_log.error("Mehrere Geometrien gefunden - Aufteilung nötig")
	}
	_target(geoms[0])
}
else {
	_log.error("Keine Geometrie gefunden")
}
</core:text>
            </cf:definition>
            <cf:explanation>
                <cf:locale country="" language="" variant="">
                    <cf:template>
                        <core:text xmlns:core="http://www.esdi-humboldt.eu/hale/core" xml:space="preserve">
Überführt die Quell-Geometrien als eine zusammengefasste Simple Feature Geometrie (ohne Multi-Geometrien).

Nur erfolgreich falls genau eine Simple Feature Geometrie gebildet werden kann. Andernfalls wird ein entsprechender Fehler in die Transformations-Logs eingetragen.
</core:text>
                    </cf:template>
                </cf:locale>
            </cf:explanation>
        </cf:custom-property-function>
    </customFunction>
    <customFunction>
        <cf:custom-property-function xmlns:cf="http://www.esdi-humboldt.eu/hale/custom-function" identifier="adv.geometry.simplefeature.multi" name="Simple Feature Geometrie (Multi)" type="groovy">
            <cf:input eager="true" maxOccurs="1" minOccurs="1" name="geometrie"/>
            <cf:output eager="false" maxOccurs="1" minOccurs="1"/>
            <cf:definition>
                <core:text xmlns:core="http://www.esdi-humboldt.eu/hale/core" xml:space="preserve">
def geoms = _.geom.toSimpleGeometries(geometries: _.geom.aggregate(geometrie), collections: true)
if (geoms) {
	if (geoms.size() &gt; 1) {
		_log.error("Mehrere Geometrien gefunden - Aufteilung nötig")
	}
	_target(geoms[0])
}
else {
	_log.error("Keine Geometrie gefunden")
}
</core:text>
            </cf:definition>
            <cf:explanation>
                <cf:locale country="" language="" variant="">
                    <cf:template>
                        <core:text xmlns:core="http://www.esdi-humboldt.eu/hale/core" xml:space="preserve">
Überführt die Quell-Geometrien als eine zusammengefasste Simple Feature Geometrie (ggf. als Multi-Geometrie).

Nur erfolgreich falls genau eine Simple Feature Geometrie gebildet werden kann. Andernfalls wird ein entsprechender Fehler in die Transformations-Logs eingetragen.
</core:text>
                    </cf:template>
                </cf:locale>
            </cf:explanation>
        </cf:custom-property-function>
    </customFunction>
    <customFunction>
        <cf:custom-property-function xmlns:cf="http://www.esdi-humboldt.eu/hale/custom-function" identifier="adv.inspire.AX_Lagebezeichnung.GeographicalName" name="AX_Lagebezeichnung zu GeographicalName" type="groovy">
            <cf:input eager="false" maxOccurs="1" minOccurs="1" name="lagebezeichnung">
                <cf:binding>java.lang.String</cf:binding>
                <cf:type name="AX_LagebezeichnungType" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
            </cf:input>
            <cf:input eager="false" maxOccurs="1" minOccurs="0" name="source">
                <cf:binding>java.lang.String</cf:binding>
            </cf:input>
            <cf:output eager="false" maxOccurs="1" minOccurs="1">
                <cf:type name="GeographicalNameType" ns="http://inspire.ec.europa.eu/schemas/gn/4.0"/>
            </cf:output>
            <cf:param maxOccurs="1" minOccurs="0" name="source">
                <cf:description>
                    <core:text xmlns:core="http://www.esdi-humboldt.eu/hale/core" xml:space="preserve">Quelle des Namens. Falls nicht angegeben wird sie aus einer Projekt-Variable bestimmt.</core:text>
                </cf:description>
                <cf:display value="Source of name"/>
                <cf:binding>java.lang.String</cf:binding>
            </cf:param>
            <cf:param maxOccurs="1" minOccurs="0" name="nameStatus">
                <cf:description>
                    <core:text xmlns:core="http://www.esdi-humboldt.eu/hale/core" xml:space="preserve">Status des Namens. Falls nicht angegeben wird als Standardwert official angenommen.</core:text>
                </cf:description>
                <cf:display value="nameStatus"/>
                <cf:value>standardised</cf:value>
                <cf:value>other</cf:value>
                <cf:value>official</cf:value>
                <cf:value>historical</cf:value>
                <cf:value>unpopulated</cf:value>
                <cf:value>unknown</cf:value>
            </cf:param>
            <cf:param maxOccurs="1" minOccurs="0" name="nativeness">
                <cf:description>
                    <core:text xmlns:core="http://www.esdi-humboldt.eu/hale/core" xml:space="preserve">Ortsüblichkeit des Namens. Falls nicht angegeben wird als Standardwert endonym angenommen.</core:text>
                </cf:description>
                <cf:display value="nativeness"/>
                <cf:value>endonym</cf:value>
                <cf:value>unpopulated</cf:value>
                <cf:value>exonym</cf:value>
                <cf:value>unknown</cf:value>
            </cf:param>
            <cf:definition>
                <core:text xmlns:core="http://www.esdi-humboldt.eu/hale/core" xml:space="preserve">
def name = lagebezeichnung.p.unverschluesselt.value()

if (!name) {
	// Namen auch aus verschlüsselter Lagebezeichnung ableiten
	
	def gemeinde = lagebezeichnung.p.verschluesselt.AX_VerschluesselteLagebezeichnung.gemeinde.value()
	def kreis = lagebezeichnung.p.verschluesselt.AX_VerschluesselteLagebezeichnung.kreis.value()
	def lage = lagebezeichnung.p.verschluesselt.AX_VerschluesselteLagebezeichnung.lage.value()
	def land = lagebezeichnung.p.verschluesselt.AX_VerschluesselteLagebezeichnung.land.value()
	def reg = lagebezeichnung.p.verschluesselt.AX_VerschluesselteLagebezeichnung.regierungsbezirk.value()

	if (land &amp;&amp; gemeinde &amp;&amp; kreis &amp;&amp; lage) {
		if (!reg) reg = '0'
		def schluesselGesamt = "$land$reg$kreis$gemeinde$lage"
		
		withTransformationContext {
			def collect = _.context.collector(it)
	  
			// Name zu Schlüssel der Lagebezeichnung aus Index holen
			if (collect.lagebezeichnung[schluesselGesamt].value()){
				name = collect.lagebezeichnung[schluesselGesamt].value()
			}
			else _log.error("Für einen Namen aus einer verschlüsselten Lagebezeichnung mit Schlüssel ${schluesselGesamt} liegt kein Katalogeintrag vor.")
		}
	}
}

if (name) {
	def sourceName_var = _project.vars.get('ADV_MODELLART', null)

	_target {
		// source

		// Priorität 1 - feste Quelle
		if (_params.source) {
			sourceOfName( _params.source )
		}
		// Priorität 2 - aus Projektvariable
		else if (sourceName_var) {
			sourceOfName( sourceName_var )
		}
		else {
			sourceOfName {
				nilReason( 'unknown' )
			}
		}

		// nativeness
		def nn = _params.nativeness
		if (nn) {
			if (nn == 'unpopulated') {
				nativeness {
					nilReason( 'other:unpopulated' )
				}
			}
			else if (nn == 'unknown') {
				nativeness {
					nilReason( 'unknown' )
				}
			}
			else {
				nativeness {
					href( 'http://inspire.ec.europa.eu/codelist/NativenessValue/' + nn )
				}
			}
		}
		else {
			// default for nativeness if not specified is endonym
			nativeness {
				href( 'http://inspire.ec.europa.eu/codelist/NativenessValue/endonym' )
			}
		}

		// nameStatus
		def ns = _params.nameStatus
		if (ns) {
			if (ns == 'unpopulated') {
				nameStatus {
					nilReason( 'other:unpopulated' )
				}
			}
			else if (ns == 'unknown') {
				nameStatus {
					nilReason( 'unknown' )
				}
			}
			else {
				nameStatus {
					href( 'http://inspire.ec.europa.eu/codelist/NameStatusValue/' + ns )
				}
			}
		}
		else {
			// default for nameStatus if not specified is official
			nameStatus {
				href( 'http://inspire.ec.europa.eu/codelist/NameStatusValue/official' )
			}
		}

		// spelling
		spelling {
			SpellingOfName {
				text( name )
				script( 'Latn' )
			}
		}
		// language
		language( 'deu' )
	}
}
else {
	throw new NoResultException()
}
</core:text>
            </cf:definition>
            <cf:explanation>
                <cf:locale country="" language="" variant="">
                    <cf:template>
                        <core:text xmlns:core="http://www.esdi-humboldt.eu/hale/core" xml:space="preserve">
Erstellt ein GeographicalName-Objekt aus einer Lagebezeichnung.&#13;
Eine unverschlüsselte Lagebezeichnung wird direkt als Name übernommen.&#13;
Falls stattdessen eine verschlüsselte Lagebezeichnung vorliegt (nur in ALKIS/DLKM möglich), wird versucht den Namen über den Schlüssel in einem Index nachzuschlagen.&#13;
Trifft keiner der beiden Fälle zu, oder kann der Name nicht nachgeschlagen werden, wird kein GeographicalName erzeugt.&#13;
&#13;
Die Sprache des Namens wird als Deutsch angenommen.&#13;
&#13;
&lt;% if (_params.nameStatus) {&#13;
  if (_params.nameStatus == 'unpopulated') {&#13;
    out &lt;&lt; "Der Status des Namens (`nameStatus`) wird nicht angegeben, als *nilReason* wird `other:unpopulated` angegeben."&#13;
  }&#13;
  else if (_params.nameStatus == 'unknown') {&#13;
    out &lt;&lt; "Der Status des Namens (`nameStatus`) wird nicht angegeben, als *nilReason* wird `unknown` angegeben."&#13;
  }&#13;
  else {&#13;
    out &lt;&lt; "Der Status des Namens (`nameStatus`) wird als ${_params.nameStatus} angegeben (siehe &lt;http://inspire.ec.europa.eu/codelist/NameStatusValue&gt;)."&#13;
  }&#13;
}&#13;
else {&#13;
  out &lt;&lt; "Der Status des Namens (`nameStatus`) wird als *official* angegeben (siehe &lt;http://inspire.ec.europa.eu/codelist/NameStatusValue&gt;)."&#13;
}&#13;
out &lt;&lt; "\n\n"&#13;
if (_params.nativeness) {&#13;
  if (_params.nativeness == 'unpopulated') {&#13;
    out &lt;&lt; "Die Ortsüblichkeit (`nativeness`) wird nicht angegeben, als *nilReason* wird `other:unpopulated` angegeben."&#13;
  }&#13;
  else if (_params.nativeness == 'unknown') {&#13;
    out &lt;&lt; "Die Ortsüblichkeit (`nativeness`) wird nicht angegeben, als *nilReason* wird `unknown` angegeben."&#13;
  }&#13;
  else {&#13;
    out &lt;&lt; "Die Ortsüblichkeit (`nativeness`) wird als ${_params.nativeness} angegeben (siehe &lt;http://inspire.ec.europa.eu/codelist/NativenessValue&gt;)."&#13;
  }&#13;
}&#13;
else {&#13;
  out &lt;&lt; "Die Ortsüblichkeit (`nativeness`) wird als *endonym* angegeben (siehe &lt;http://inspire.ec.europa.eu/codelist/NativenessValue&gt;)."&#13;
}&#13;
out &lt;&lt; "\n\n"&#13;
if (_params.source) {&#13;&#13;
  out &lt;&lt; "Die Quelle des Namens (`sourceOfName`) wird als ${_params.source} angegeben."&#13;&#13;
} else {&#13;&#13;
  out &lt;&lt; "Die Quelle des Namens (`sourceOfName`) wird aus einer Projekt-Variable (`ADV_MODELLART`) bestimmt, falls vorhanden."&#13;&#13;
} %&gt;
</core:text>
                    </cf:template>
                </cf:locale>
            </cf:explanation>
        </cf:custom-property-function>
    </customFunction>
    <customFunction>
        <cf:custom-property-function xmlns:cf="http://www.esdi-humboldt.eu/hale/custom-function" identifier="adv.inspire.GeographicalName.simple" name="Einfacher GeographicalName (Deutsch)" type="groovy">
            <cf:input eager="false" maxOccurs="1" minOccurs="1" name="spelling">
                <cf:binding>java.lang.String</cf:binding>
            </cf:input>
            <cf:input eager="true" maxOccurs="1" minOccurs="0" name="source">
                <cf:binding>java.lang.String</cf:binding>
                <cf:type name="AA_ModellartPropertyType" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
            </cf:input>
            <cf:output eager="false" maxOccurs="1" minOccurs="1">
                <cf:type name="GeographicalNameType" ns="http://inspire.ec.europa.eu/schemas/gn/4.0"/>
            </cf:output>
            <cf:param maxOccurs="1" minOccurs="0" name="source">
                <cf:description>
                    <core:text xmlns:core="http://www.esdi-humboldt.eu/hale/core" xml:space="preserve">Quelle des Namens. Falls nicht angegeben wird sie aus einer Projekt-Variable oder, falls konfiguriert, aus dem Quell-Objekt bestimmt.</core:text>
                </cf:description>
                <cf:display value="Source of name"/>
                <cf:binding>java.lang.String</cf:binding>
            </cf:param>
            <cf:param maxOccurs="1" minOccurs="0" name="nameStatus">
                <cf:description>
                    <core:text xmlns:core="http://www.esdi-humboldt.eu/hale/core" xml:space="preserve">Status des Namens. Falls nicht angegeben wird als Standardwert official angenommen.</core:text>
                </cf:description>
                <cf:display value="nameStatus"/>
                <cf:value>standardised</cf:value>
                <cf:value>other</cf:value>
                <cf:value>official</cf:value>
                <cf:value>historical</cf:value>
                <cf:value>unpopulated</cf:value>
                <cf:value>unknown</cf:value>
            </cf:param>
            <cf:param maxOccurs="1" minOccurs="0" name="nativeness">
                <cf:description>
                    <core:text xmlns:core="http://www.esdi-humboldt.eu/hale/core" xml:space="preserve">Ortsüblichkeit des Namens. Falls nicht angegeben wird als Standardwert endonym angenommen.</core:text>
                </cf:description>
                <cf:display value="nativeness"/>
                <cf:value>endonym</cf:value>
                <cf:value>unpopulated</cf:value>
                <cf:value>exonym</cf:value>
                <cf:value>unknown</cf:value>
            </cf:param>
            <cf:definition>
                <core:text xmlns:core="http://www.esdi-humboldt.eu/hale/core" xml:space="preserve">
def sourceNameFromModellart() {
	if (source) {
		def modelle = source.p.AA_Modellart.advStandardModell.values()
		if (modelle) {
			//TODO Logik um korrektes anzugebendes Modell zu bestimmen?
			//XXX Vorerst wird erstes Modell zurückgegeben
			return modelle[0]
		}
	}
	
	null
}

def sourceName_input = sourceNameFromModellart()
def sourceName_var = _project.vars.get('ADV_MODELLART', null)

if (spelling) {
	_target {
		
		// Priorität 1 - feste Quelle
		if (_params.source) {
			sourceOfName( _params.source )
		}
		// Priorität 2 - aus Projektvariable
		else if (sourceName_var) {
			sourceOfName( sourceName_var )
		}
		// Priorität 3 - aus Quell-Objekt
		else if (sourceName_input) {
			sourceOfName( sourceName_input )
		}
		else {
			sourceOfName {
				nilReason( 'unknown' )
			}
		}
		pronunciation {
			nilReason( 'other:unpopulated' )
		}
		// nameStatus
		def ns = _params.nameStatus
		if (ns) {
			if (ns == 'unpopulated') {
				nameStatus {
					nilReason( 'other:unpopulated' )
				}
			}
			else if (ns == 'unknown') {
				nameStatus {
					nilReason( 'unknown' )
				}
			}
			else {
				nameStatus {
					href( 'http://inspire.ec.europa.eu/codelist/NameStatusValue/' + ns )
				}
			}
		}
		else {
			// default for nameStatus if not specified is official
			nameStatus {
				href( 'http://inspire.ec.europa.eu/codelist/NameStatusValue/official' )
			}
		}
		// nativeness
		def nn = _params.nativeness
		if (nn) {
			if (nn == 'unpopulated') {
				nativeness {
					nilReason( 'other:unpopulated' )
				}
			}
			else if (nn == 'unknown') {
				nativeness {
					nilReason( 'unknown' )
				}
			}
			else {
				nativeness {
					href( 'http://inspire.ec.europa.eu/codelist/NativenessValue/' + nn )
				}
			}
		}
		else {
			// default for nativeness if not specified is endonym
			nativeness {
				href( 'http://inspire.ec.europa.eu/codelist/NativenessValue/endonym' )
			}
		}
		spelling {
			SpellingOfName {
				text( spelling )
				script ( 'Latn' )
			}
		}
		language( 'deu' )
	}
}
else {
	throw new NoResultException()
}
</core:text>
            </cf:definition>
            <cf:explanation>
                <cf:locale country="" language="" variant="">
                    <cf:template>
                        <core:text xmlns:core="http://www.esdi-humboldt.eu/hale/core" xml:space="preserve">
Bildet ein GeographicalName-Objekt zu einem einfachen Namen. Der Wert des Quell-Attributs $spelling wird als Schreibweise des Namens übernommen (`SpellingOfName`).&#13;
&#13;
Die Sprache wird als Deutsch angenommen.&#13;

&lt;% if (_params.nameStatus) {
  if (_params.nameStatus == 'unpopulated') {
    out &lt;&lt; "Der Status des Namens (`nameStatus`) wird nicht angegeben, als *nilReason* wird `other:unpopulated` angegeben."
  }
  else if (_params.nameStatus == 'unknown') {
    out &lt;&lt; "Der Status des Namens (`nameStatus`) wird nicht angegeben, als *nilReason* wird `unknown` angegeben."
  }
  else {
    out &lt;&lt; "Der Status des Namens (`nameStatus`) wird als ${_params.nameStatus} angegeben (siehe &lt;http://inspire.ec.europa.eu/codelist/NameStatusValue&gt;)."
  }
}
else {
  out &lt;&lt; "Der Status des Namens (`nameStatus`) wird als *official* angegeben (siehe &lt;http://inspire.ec.europa.eu/codelist/NameStatusValue&gt;)."
}
out &lt;&lt; "\n\n"
if (_params.nativeness) {
  if (_params.nativeness == 'unpopulated') {
    out &lt;&lt; "Die Ortsüblichkeit (`nativeness`) wird nicht angegeben, als *nilReason* wird `other:unpopulated` angegeben."
  }
  else if (_params.nativeness == 'unknown') {
    out &lt;&lt; "Die Ortsüblichkeit (`nativeness`) wird nicht angegeben, als *nilReason* wird `unknown` angegeben."
  }
  else {
    out &lt;&lt; "Die Ortsüblichkeit (`nativeness`) wird als ${_params.nativeness} angegeben (siehe &lt;http://inspire.ec.europa.eu/codelist/NativenessValue&gt;)."
  }
}
else {
  out &lt;&lt; "Die Ortsüblichkeit (`nativeness`) wird als *endonym* angegeben (siehe &lt;http://inspire.ec.europa.eu/codelist/NativenessValue&gt;)."
}
out &lt;&lt; "\n\n"
if (_params.source) {&#13;
  out &lt;&lt; "Die Quelle des Namens (`sourceOfName`) wird als ${_params.source} angegeben."&#13;
} else if (source) {&#13;
  out &lt;&lt; "Die Quelle des Namens (`sourceOfName`) wird aus einer Projekt-Variable (`ADV_MODELLART`) bestimmt, falls vorhanden, andernfalls wird das Quell-Attribut $source dafür herangezogen. "&#13;
  out &lt;&lt; "In letzterem Fall kann nur eine von potentiell mehreren im Quellobjekt angegebenen Modellarten übernommen werden."&#13;
} else {&#13;
  out &lt;&lt; "Die Quelle des Namens (`sourceOfName`) wird aus einer Projekt-Variable (`ADV_MODELLART`) bestimmt, falls vorhanden."&#13;
} %&gt;
</core:text>
                    </cf:template>
                </cf:locale>
            </cf:explanation>
        </cf:custom-property-function>
    </customFunction>
    <customFunction>
        <cf:custom-property-function xmlns:cf="http://www.esdi-humboldt.eu/hale/custom-function" identifier="adv.inspire.date.earliest" name="Jüngstes Datum" type="groovy">
            <cf:input eager="true" maxOccurs="-1" minOccurs="1" name="dates">
                <cf:binding>java.lang.String</cf:binding>
            </cf:input>
            <cf:output eager="false" maxOccurs="1" minOccurs="1">
                <cf:binding>java.lang.String</cf:binding>
            </cf:output>
            <cf:definition>
                <core:text xmlns:core="http://www.esdi-humboldt.eu/hale/core" xml:space="preserve">
//import java.text.SimpleDateFormat
//def formatter = new SimpleDateFormat('yyyy-MM-dd')

// all source dates as list
def values = dates.p.values()

if (!values) {
	// no result
	return null
}

// try to convert to date
values = values.collect { value -&gt;
	def result
	//XXX skip instanceof check - instanceof is not supported by Groovy Sandbox
	// and Class.isInstance requires the Groovy restriction to be lifted
	//if (Date.isInstance(value)) {
	//	result = value
	//}
	//TODO also support parsing based on provided pattern?
	if (result == null) {
		// try hale conversion
		result = _.convert(value: value, to: Date)
	}
	if (result == null) {
		result = value as Date
	}
	result
}

// sort dates
values.sort()

// yield last date
values[-1]
</core:text>
            </cf:definition>
            <cf:explanation>
                <cf:locale country="" language="" variant="">
                    <cf:template>
                        <core:text xmlns:core="http://www.esdi-humboldt.eu/hale/core" xml:space="preserve">Liefert das jüngste Datum/Zeit aller Eingabedaten.</core:text>
                    </cf:template>
                </cf:locale>
            </cf:explanation>
        </cf:custom-property-function>
    </customFunction>
    <customFunction>
        <cf:custom-property-function xmlns:cf="http://www.esdi-humboldt.eu/hale/custom-function" identifier="adv.inspire.id.default" name="AdV INSPIRE localId" type="groovy">
            <cf:input eager="true" maxOccurs="-1" minOccurs="1" name="id">
                <cf:binding>java.lang.String</cf:binding>
            </cf:input>
            <cf:output eager="false" maxOccurs="1" minOccurs="1">
                <cf:binding>java.lang.String</cf:binding>
            </cf:output>
            <cf:param maxOccurs="1" minOccurs="0" name="collectorName">
                <cf:description>
                    <core:text xmlns:core="http://www.esdi-humboldt.eu/hale/core" xml:space="preserve">Name eines Kollektors, der verwendet werden soll, um die erzeugten IDs zu sammeln.</core:text>
                </cf:description>
                <cf:display value="Collector name"/>
                <cf:binding>java.lang.String</cf:binding>
            </cf:param>
            <cf:definition>
                <core:text xmlns:core="http://www.esdi-humboldt.eu/hale/core" xml:space="preserve">
// alle Quell-IDs als Liste
def identifiers = id.p.values()

def id

if (identifiers.size() == 1) {
  // verwende Original-ID falls nur eine Quelle
  id = identifiers[0]
}
else {
  // sortieren (TODO spezielle Ordnung benötigt?)
  identifiers = identifiers.sort()

  def identString = identifiers.join()

  id = '_' + _.crypto.sha256(identString)
}

// Ziel-Typ als Präfix
if (true /*_params.useTargetTypePrefix*/) {
  def targetType = _targetType.definition.name.localPart
  if (targetType) {
    if (targetType.endsWith('Type')) {
      targetType = targetType[0..-5]
    }
  
    if (!id.startsWith('_')) {
      id = '_' + id
    }
    id = targetType + id
  }
}

// Falls ein Collector-Name angegeben wurde, IDs in diesem einspeisen

if (_params.collectorName) {
  withTransformationContext {
    def c = _.context.collector(it)
    c[_params.collectorName] &lt;&lt; id
  }
}

id
</core:text>
            </cf:definition>
            <cf:explanation>
                <cf:locale country="" language="" variant="">
                    <cf:template>
                        <core:text xmlns:core="http://www.esdi-humboldt.eu/hale/core" xml:space="preserve">
Bestimmung einer INSPIRE localId oder GML id aus Fachkennzeichen oder AAA-ObjektIDs.

Für eine einzige Quell-ID wird diese direkt herangezogen.

Andernfalls wird unter Verwendung des SHA256-Algorithmus ein Hash-Wert aus den sortierten und dann konkatenierten Quell-IDs gebildet und hexadezimal kodiert.

Außerdem wird der Name des Feature-Typs des Ziel-Modells als Präfix vorangestellt. Dabei wird sichergestellt dass der Typ-Name von den weiteren Teilen der ID durch einen Unterstrich getrennt ist.
</core:text>
                    </cf:template>
                </cf:locale>
            </cf:explanation>
        </cf:custom-property-function>
    </customFunction>
    <customFunction>
        <cf:custom-property-function xmlns:cf="http://www.esdi-humboldt.eu/hale/custom-function" identifier="adv.inspire.identifier" name="AdV INSPIRE identifier (URI)" type="groovy">
            <cf:input eager="true" maxOccurs="-1" minOccurs="1" name="id">
                <cf:binding>java.lang.String</cf:binding>
            </cf:input>
            <cf:output eager="false" maxOccurs="1" minOccurs="1">
                <cf:type name="CodeWithAuthorityType" ns="http://www.opengis.net/gml/3.2"/>
            </cf:output>
            <cf:definition>
                <core:text xmlns:core="http://www.esdi-humboldt.eu/hale/core" xml:space="preserve">
// alle Quell-IDs als Liste
def identifiers = id.p.values()

def id

if (identifiers.size() == 1) {
  // verwende Original-ID falls nur eine Quelle
  id = identifiers[0]
}
else {
  // sortieren (TODO spezielle Ordnung benötigt?)
  identifiers = identifiers.sort()

  def identString = identifiers.join()

  id = '_' + _.crypto.sha256(identString)
}

// Ziel-Typ als Präfix
if (true /*_params.useTargetTypePrefix*/) {
  def targetType = _targetType.definition.name.localPart
  if (targetType) {
    if (targetType.endsWith('Type')) {
      targetType = targetType[0..-5]
    }
  
    if (!id.startsWith('_')) {
      id = '_' + id
    }
    id = targetType + id
  }
}

// Verknüpfung mit namespace
def namespace = _project.vars.INSPIRE_NAMESPACE
if (namespace) {
  if (!namespace.endsWith('/')) {
    namespace = namespace + '/'
  }
  
  // namespace und id als Ergebnis
  _target(namespace + id) {
	codeSpace( 'http://inspire.ec.europa.eu/ids' )
  }
}
else {
  // nur id als Ergebnis
  _target(id) {
	codeSpace( 'http://inspire.ec.europa.eu/ids' )
  }
}
</core:text>
            </cf:definition>
            <cf:explanation>
                <cf:locale country="" language="" variant="">
                    <cf:template>
                        <core:text xmlns:core="http://www.esdi-humboldt.eu/hale/core" xml:space="preserve">
Bestimmung eines GML identifiers URI bestehend INSPIRE namespace und localId aus Fachkennzeichen oder AAA-ObjektIDs.

Für eine einzige Quell-ID wird diese direkt für die localId herangezogen. Andernfalls wird unter Verwendung des SHA256-Algorithmus ein Hash-Wert aus den sortierten und dann konkatenierten Quell-IDs gebildet und hexadezimal kodiert.
Als Präfix wird der localId der Name des Feature-Typs des Ziel-Modells vorangestellt. Dabei wird sichergestellt dass der Typ-Name von den weiteren Teilen der ID durch einen Unterstrich getrennt ist.

Der für Datenanbieter und Datensatz spezifische Namespace muss als Vorgabe (Projekt-Variable) konfiguriert werden.

Der `codeSpace` für den GML identifier wird als `http://inspire.ec.europa.eu/ids` gesetzt.
</core:text>
                    </cf:template>
                </cf:locale>
            </cf:explanation>
        </cf:custom-property-function>
    </customFunction>
    <customFunction>
        <cf:custom-property-function xmlns:cf="http://www.esdi-humboldt.eu/hale/custom-function" identifier="adv.inspire.namespace" name="AdV INSPIRE ID namespace" type="groovy">
            <cf:output eager="false" maxOccurs="1" minOccurs="1">
                <cf:binding>java.lang.String</cf:binding>
            </cf:output>
            <cf:definition>
                <core:text xmlns:core="http://www.esdi-humboldt.eu/hale/core" xml:space="preserve">
// verwende Wert aus Projekt-Variable "INSPIRE_NAMESPACE"
_project.vars.INSPIRE_NAMESPACE
</core:text>
            </cf:definition>
            <cf:explanation>
                <cf:locale country="" language="" variant="">
                    <cf:template>
                        <core:text xmlns:core="http://www.esdi-humboldt.eu/hale/core" xml:space="preserve">
Setzt $_target auf den für den Datensatz vorgegebenen festen INSPIRE Namespace.

Der für Datenanbieter und Datensatz spezifische Namespace muss dafür als Vorgabe (Projekt-Variable) konfiguriert werden.
</core:text>
                    </cf:template>
                </cf:locale>
            </cf:explanation>
        </cf:custom-property-function>
    </customFunction>
    <customFunction>
        <cf:custom-property-function xmlns:cf="http://www.esdi-humboldt.eu/hale/custom-function" identifier="adv.uom.toucum" name="AdV Maßeinheit zu UCUM" type="groovy">
            <cf:input eager="false" maxOccurs="1" minOccurs="1" name="uom">
                <cf:binding>java.lang.String</cf:binding>
            </cf:input>
            <cf:output eager="false" maxOccurs="1" minOccurs="1">
                <cf:binding>java.lang.String</cf:binding>
            </cf:output>
            <cf:definition>
                <core:text xmlns:core="http://www.esdi-humboldt.eu/hale/core" xml:space="preserve">
if (!uom) {
	throw new NoResultException()
}

def result

// Mapping auf UCUM
switch(uom) {
case 'urn:adv:uom:m2':
	result = 'm2'
	break
case 'urn:adv:uom:m':
	result = 'm'
	break
case 'urn:adv:uom:km':
	result = 'km'
	break
}

if (!result) {
	// Transformations-Warnung falls kein Mapping auf UCUM vorhanden
	_log.warn("Unknown UCUM representation for unit of measurment $uom, using code as-is")
	result = uom
}

result
</core:text>
            </cf:definition>
            <cf:explanation>
                <cf:locale country="" language="" variant="">
                    <cf:template>
                        <core:text xmlns:core="http://www.esdi-humboldt.eu/hale/core" xml:space="preserve">
Abbildung von Maßeinheiten aus AdV URNs nach UCUM

*Keine vollständige Abbildung, muss ggf. ergänzt werden.*

Aktuell ist folgende Abbildung umgesetzt:

- `urn:adv:uom:m2` zu `m2`
- `urn:adv:uom:m`zu `m`

</core:text>
                    </cf:template>
                </cf:locale>
            </cf:explanation>
        </cf:custom-property-function>
    </customFunction>
</alignment>
