<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<alignment xmlns="http://www.esdi-humboldt.eu/hale/alignment">
    <base prefix="ba1" location="aaa-au-basis.halex.alignment.xml"/>
    <base prefix="ba2" location="../base-functions.halex.alignment.xml"/>
    <cell relation="eu.esdihumboldt.cst.functions.groovy.retype" id="Ce653f33d-5e1e-4b8b-aee7-9e48ef01f113" priority="low">
        <source>
            <class>
                <type name="AX_BundeslandType" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
            </class>
        </source>
        <target>
            <class>
                <type name="AdministrativeUnitType" ns="http://inspire.ec.europa.eu/schemas/au/4.0"/>
            </class>
        </target>
        <complexParameter name="script">
            <core:text xmlns:core="http://www.esdi-humboldt.eu/hale/core" xml:space="preserve">
import com.vividsolutions.jts.geom.*
import com.vividsolutions.jts.io.WKTReader
import com.vividsolutions.jts.algorithm.CGAlgorithms
import eu.esdihumboldt.hale.common.instance.geometry.DefaultGeometryProperty

class Processor {

    static final GeometryFactory factory = new GeometryFactory()
    
    Polygon convert(Polygon p, areaThreshold) {
        if (p.numInteriorRing &gt; 0) {
            // has holes
            LinearRing shell = p.exteriorRing
            List&lt;LinearRing&gt; holes = []
            
            for (int i = 0; i &lt; p.numInteriorRing; i++) {
                LinearRing hole = p.getInteriorRingN(i)
                
                // determine area of hole
                try {
                    double area = CGAlgorithms.signedArea(hole.coordinates)
                    // println "Area of hole: $area"
                    if (Math.abs(area) &gt; areaThreshold) {
                        // keep hole
                        holes &lt;&lt; hole
                        _log.info("Loch in AdministrativeUnit mit Fläche ${area} beibehalten")
                    }
                    else {
                        // throw hole away
                    }
                } catch (Exception e) {
                    // ignore
                }
            }
            
            factory.createPolygon(shell, holes.toArray(new LinearRing[holes.size()]))
        }
        else {
            // no holes
            p
        }
    }
    
    MultiPolygon convert(MultiPolygon mp, areaThreshold) {
        if (mp.numGeometries) {
            Polygon[] polygons = new Polygon[mp.numGeometries]
            for (int i = 0; i &lt; mp.numGeometries; i++) {
                polygons[i] = convert(mp.getGeometryN(i), areaThreshold)
            }
            factory.createMultiPolygon(polygons)
        }
        else {
            // empty
            mp
        }
    }
    
    Geometry convert(Geometry g, areaThreshold) {
        // nothing to do
        g
    }

}

def _id = 'AdministrativeUnit_' + _source.p.schluesselGesamt.value()

// Geometrien aus Lower Level Unit
def geoms = _.context.collector().LowerLevelGeometrien[_id].clear()

// führe den Join nicht aus wenn keine assoziierten Flurstücke
// mit entsprechender Geometrie vorhanden sind
if (!geoms) {
	throw new NoResultException()
}

def collect
withTransformationContext {
	collect = _.context.collector(it)
}

def union = _.geom.union(geoms)

// remove small holes created due to interpolation
def g = union.geometry
g = new Processor().convert(g, _project.variables.ERROR_AREA_THRESHOLD as double)
union = new DefaultGeometryProperty(union.CRSDefinition, g)

_target{
	geometry {
		MultiSurface( union )
	}
	// gesammelte lowerLevelUnits
	collect.land[_id].each { lowerId -&gt;
		lowerLevelUnit {
			href( "#$lowerId" )
		}
	}
}
</core:text>
        </complexParameter>
        <documentation>Erstellt eine `AdministrativeUnit` aus einem `AX_Bundesland`.
Die Geometrie wird aus den Geometrien der untergeordneten Ebene zusammengefügt.

Die Verknüpfung zur untergeordneten Ebene von `AdministrativeUnit`s wird über die im Index gesammelten Informationen hergestellt.</documentation>
    </cell>
    <cell relation="eu.esdihumboldt.cst.functions.groovy.join" id="C67bd480d-5ea0-4ef8-b84c-15b1063d2667" priority="higher">
        <source name="types">
            <class>
                <type name="AX_FlurstueckType" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
            </class>
        </source>
        <source name="types">
            <class>
                <type name="AX_GemeindeType" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
            </class>
        </source>
        <target>
            <class>
                <type name="AdministrativeUnitType" ns="http://inspire.ec.europa.eu/schemas/au/4.0"/>
            </class>
        </target>
        <complexParameter name="join">
            <jp:join-parameter xmlns:jp="http://www.esdi-humboldt.eu/hale/join">
                <class>
                    <type name="AX_GemeindeType" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                </class>
                <class>
                    <type name="AX_FlurstueckType" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                </class>
                <jp:condition>
                    <property>
                        <type name="AX_GemeindeType" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                        <child name="gemeindekennzeichen" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                        <child name="AX_Gemeindekennzeichen" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                        <child name="gemeinde" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                    </property>
                    <property>
                        <type name="AX_FlurstueckType" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                        <child name="gemeindezugehoerigkeit" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                        <child name="AX_Gemeindekennzeichen" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                        <child name="gemeinde" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                    </property>
                </jp:condition>
                <jp:condition>
                    <property>
                        <type name="AX_GemeindeType" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                        <child name="gemeindekennzeichen" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                        <child name="AX_Gemeindekennzeichen" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                        <child name="kreis" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                    </property>
                    <property>
                        <type name="AX_FlurstueckType" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                        <child name="gemeindezugehoerigkeit" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                        <child name="AX_Gemeindekennzeichen" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                        <child name="kreis" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                    </property>
                </jp:condition>
                <jp:condition>
                    <property>
                        <type name="AX_GemeindeType" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                        <child name="gemeindekennzeichen" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                        <child name="AX_Gemeindekennzeichen" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                        <child name="land" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                    </property>
                    <property>
                        <type name="AX_FlurstueckType" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                        <child name="gemeindezugehoerigkeit" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                        <child name="AX_Gemeindekennzeichen" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                        <child name="land" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                    </property>
                </jp:condition>
                <jp:condition>
                    <property>
                        <type name="AX_GemeindeType" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                        <child name="gemeindekennzeichen" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                        <child name="AX_Gemeindekennzeichen" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                        <child name="regierungsbezirk" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                    </property>
                    <property>
                        <type name="AX_FlurstueckType" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                        <child name="gemeindezugehoerigkeit" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                        <child name="AX_Gemeindekennzeichen" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                        <child name="regierungsbezirk" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                    </property>
                </jp:condition>
            </jp:join-parameter>
        </complexParameter>
        <complexParameter name="script">
            <core:text xmlns:core="http://www.esdi-humboldt.eu/hale/core" xml:space="preserve">
import com.vividsolutions.jts.geom.*
import com.vividsolutions.jts.io.WKTReader
import com.vividsolutions.jts.algorithm.CGAlgorithms
import eu.esdihumboldt.hale.common.instance.geometry.DefaultGeometryProperty

class Processor {

    static final GeometryFactory factory = new GeometryFactory()
    
    Polygon convert(Polygon p, areaThreshold) {
        if (p.numInteriorRing &gt; 0) {
            // has holes
            LinearRing shell = p.exteriorRing
            List&lt;LinearRing&gt; holes = []
            
            for (int i = 0; i &lt; p.numInteriorRing; i++) {
                LinearRing hole = p.getInteriorRingN(i)
                
                // determine area of hole
                try {
                    double area = CGAlgorithms.signedArea(hole.coordinates)
                    // println "Area of hole: $area"
                    if (Math.abs(area) &gt; areaThreshold) {
                        // keep hole
                        holes &lt;&lt; hole
                        _log.info("Loch in AdministrativeUnit mit Fläche ${area} beibehalten")
                    }
                    else {
                        // throw hole away
                    }
                } catch (Exception e) {
                    // ignore
                }
            }
            
            factory.createPolygon(shell, holes.toArray(new LinearRing[holes.size()]))
        }
        else {
            // no holes
            p
        }
    }
    
    MultiPolygon convert(MultiPolygon mp, areaThreshold) {
        if (mp.numGeometries) {
            Polygon[] polygons = new Polygon[mp.numGeometries]
            for (int i = 0; i &lt; mp.numGeometries; i++) {
                polygons[i] = convert(mp.getGeometryN(i), areaThreshold)
            }
            factory.createMultiPolygon(polygons)
        }
        else {
            // empty
            mp
        }
    }
    
    Geometry convert(Geometry g, areaThreshold) {
        // nothing to do
        g
    }

}


// alle Eigenschaften mit Geometrien aus Flurstücken
def geoms = _source.links.AX_Flurstueck.p.position.list()

// führe den Join nicht aus wenn keine assoziierten Flurstücke
// vorhanden sind
if (!geoms) {
	throw new NoResultException()
}

// bilde Union
def union = _.geom.union(geoms)

// remove small holes created due to interpolation
def g = union.geometry
g = new Processor().convert(g, _project.variables.ERROR_AREA_THRESHOLD as double)
union = new DefaultGeometryProperty(union.CRSDefinition, g)

// bestimmte upper level unit (Verwaltungsgemeinschaft oder Kreis)
def collect
withTransformationContext {
	collect = _.context.collector(it)
}
def _id = 'AdministrativeUnit_' + _source.p.schluesselGesamt.value()
// hinterlegte Verwaltungsgemeinschaft
def upperLevelUnit = collect.verwaltungsGemeinschaft[_id].value()
if (!upperLevelUnit) {
	// Kreis/Region
	def land = _source.p.gemeindekennzeichen.AX_Gemeindekennzeichen.land.value()
	def regBezirk = _source.p.gemeindekennzeichen.AX_Gemeindekennzeichen.regierungsbezirk.value()?:'0'
	def kreis = _source.p.gemeindekennzeichen.AX_Gemeindekennzeichen.kreis.value()
	
	upperLevelUnit =  "AdministrativeUnit_${land}${regBezirk}${kreis}"
	
	// Sammle ID für Kreis/Region
	collect.kreis[upperLevelUnit] &lt;&lt; _id
	
	// speichere aggregierte Geometrie für Bildung von Kreis/Region
	collect.LowerLevelGeometrien[upperLevelUnit] &lt;&lt; union
}

_target{
	geometry {
		MultiSurface( union )
	}
	_b.upperLevelUnit {
		href( "#${upperLevelUnit}" )
	}
}
</core:text>
        </complexParameter>
        <documentation>Erstellt eine `AdministrativeUnit` aus einer `AX_Gemeinde`.
Die Geometrie wird aus den über den Schlüssel verknüpften `AX_Flurstueck` zusammengefügt. Nur falls entsprechende Flurstücke gefunden werden wird eine eine `AdministrativeUnit` erstellt.

Über den Index wird bestimmt ob die Gemeinde zu einer Verwaltungsgemeinschaft gehört. Diese wird als `upperLevelUnit` referenziert.
Falls keine Zugehörigkeit zu einer Verwaltungsgemeinschaft besteht wird die Zugehörigkeit zur übergeordneten `AdministrativeUnit` (in diesem Fall *Kreis*) im Index hinterlegt.</documentation>
    </cell>
    <cell relation="eu.esdihumboldt.cst.functions.groovy.join" id="C153144ee-8008-471c-a689-adba7e1d10b7" priority="highest">
        <source name="types">
            <class>
                <type name="AX_GemeindeType" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
            </class>
        </source>
        <source name="types">
            <class>
                <type name="AX_VerwaltungsgemeinschaftType" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
            </class>
        </source>
        <source name="types">
            <class>
                <type name="AX_FlurstueckType" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
            </class>
        </source>
        <target>
            <class>
                <type name="AdministrativeUnitType" ns="http://inspire.ec.europa.eu/schemas/au/4.0"/>
            </class>
        </target>
        <complexParameter name="join">
            <jp:join-parameter xmlns:jp="http://www.esdi-humboldt.eu/hale/join">
                <class>
                    <type name="AX_VerwaltungsgemeinschaftType" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                </class>
                <class>
                    <type name="AX_GemeindeType" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                </class>
                <class>
                    <type name="AX_FlurstueckType" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                </class>
                <jp:condition>
                    <property>
                        <type name="AX_GemeindeType" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                        <child name="gemeindekennzeichen" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                        <child name="AX_Gemeindekennzeichen" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                        <child name="gemeinde" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                    </property>
                    <property>
                        <type name="AX_FlurstueckType" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                        <child name="gemeindezugehoerigkeit" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                        <child name="AX_Gemeindekennzeichen" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                        <child name="gemeinde" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                    </property>
                </jp:condition>
                <jp:condition>
                    <property>
                        <type name="AX_GemeindeType" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                        <child name="gemeindekennzeichen" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                        <child name="AX_Gemeindekennzeichen" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                        <child name="kreis" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                    </property>
                    <property>
                        <type name="AX_FlurstueckType" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                        <child name="gemeindezugehoerigkeit" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                        <child name="AX_Gemeindekennzeichen" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                        <child name="kreis" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                    </property>
                </jp:condition>
                <jp:condition>
                    <property>
                        <type name="AX_GemeindeType" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                        <child name="gemeindekennzeichen" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                        <child name="AX_Gemeindekennzeichen" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                        <child name="land" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                    </property>
                    <property>
                        <type name="AX_FlurstueckType" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                        <child name="gemeindezugehoerigkeit" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                        <child name="AX_Gemeindekennzeichen" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                        <child name="land" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                    </property>
                </jp:condition>
                <jp:condition>
                    <property>
                        <type name="AX_GemeindeType" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                        <child name="gemeindekennzeichen" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                        <child name="AX_Gemeindekennzeichen" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                        <child name="regierungsbezirk" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                    </property>
                    <property>
                        <type name="AX_FlurstueckType" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                        <child name="gemeindezugehoerigkeit" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                        <child name="AX_Gemeindekennzeichen" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                        <child name="regierungsbezirk" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                    </property>
                </jp:condition>
                <jp:condition>
                    <property>
                        <type name="AX_VerwaltungsgemeinschaftType" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                        <child name="identifier" ns="http://www.opengis.net/gml/3.2"/>
                    </property>
                    <property>
                        <type name="AX_GemeindeType" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                        <child name="istTeilVon" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                        <child name="href" ns="http://www.w3.org/1999/xlink"/>
                    </property>
                </jp:condition>
            </jp:join-parameter>
        </complexParameter>
        <complexParameter name="script">
            <core:text xmlns:core="http://www.esdi-humboldt.eu/hale/core" xml:space="preserve">
import com.vividsolutions.jts.geom.*
import com.vividsolutions.jts.io.WKTReader
import com.vividsolutions.jts.algorithm.CGAlgorithms
import eu.esdihumboldt.hale.common.instance.geometry.DefaultGeometryProperty

class Processor {

    static final GeometryFactory factory = new GeometryFactory()
    
    Polygon convert(Polygon p, areaThreshold) {
        if (p.numInteriorRing &gt; 0) {
            // has holes
            LinearRing shell = p.exteriorRing
            List&lt;LinearRing&gt; holes = []
            
            for (int i = 0; i &lt; p.numInteriorRing; i++) {
                LinearRing hole = p.getInteriorRingN(i)
                
                // determine area of hole
                try {
                    double area = CGAlgorithms.signedArea(hole.coordinates)
                    // println "Area of hole: $area"
                    if (Math.abs(area) &gt; areaThreshold) {
                        // keep hole
                        holes &lt;&lt; hole
                        _log.info("Loch in AdministrativeUnit mit Fläche ${area} beibehalten")
                    }
                    else {
                        // throw hole away
                    }
                } catch (Exception e) {
                    // ignore
                }
            }
            
            factory.createPolygon(shell, holes.toArray(new LinearRing[holes.size()]))
        }
        else {
            // no holes
            p
        }
    }
    
    MultiPolygon convert(MultiPolygon mp, areaThreshold) {
        if (mp.numGeometries) {
            Polygon[] polygons = new Polygon[mp.numGeometries]
            for (int i = 0; i &lt; mp.numGeometries; i++) {
                polygons[i] = convert(mp.getGeometryN(i), areaThreshold)
            }
            factory.createMultiPolygon(polygons)
        }
        else {
            // empty
            mp
        }
    }
    
    Geometry convert(Geometry g, areaThreshold) {
        // nothing to do
        g
    }

}


// alle Eigenschaften mit Geometrien aus Flurstücken
def geoms = _.geom.findPolygons(_source.links.AX_Gemeinde.AX_Flurstueck.p.position.list())

// führe den Join nicht aus wenn keine assoziierten Flurstücke
// mit entsprechender Geometrie vorhanden sind
def sourceId = _source.p.id.value()
if (!geoms) {
	def gemeinden = _source.links.AX_Gemeinde.p.id.values()
	if (gemeinden) {
		_log.warn("Keine Flurstückgeometrien zu Verwaltungsgemeinschaft $sourceId gefunden, zugehörige AdminstrativeUnit wird nicht erstellt")
	}
	else {
		_log.warn("Keine Gemeinden zu Verwaltungsgemeinschaft $sourceId gefunden, zugehörige AdminstrativeUnit wird nicht erstellt")
	}
	throw new NoResultException()
}

// Schlüssel für alle Gemeinden der Gemeinschaft
def gemeinden = _source.links.AX_Gemeinde.p.schluesselGesamt.values()

if (gemeinden &amp;&amp; gemeinden.size() == 1) {
	_log.warn("Nur eine Gemeinde zu Verwaltungsgemeinschaft $sourceId gefunden")
}

// bestimme upperLevelUnit
def upperLevelUnit = 'AdministrativeUnit_' + _source.p.schluesselGesamt.value()[0..4]

def union = _.geom.union(geoms)

// remove small holes created due to interpolation
def g = union.geometry
g = new Processor().convert(g, _project.variables.ERROR_AREA_THRESHOLD as double)
union = new DefaultGeometryProperty(union.CRSDefinition, g)

_target{
	geometry {
		MultiSurface( union )
	}
	// Verweis auf Gemeinden
	gemeinden.each { gem -&gt;
		lowerLevelUnit {
			href( "#AdministrativeUnit_$gem" )
		}
	}
	_b.upperLevelUnit {
		href( "#$upperLevelUnit" )
	}
}

withTransformationContext {
	def collect = _.context.collector(it)
	def _id = 'AdministrativeUnit_' + _source.p.id.value()
	// Hinterlege ID je Gemeinde
	gemeinden.each {
		collect.verwaltungsGemeinschaft['AdministrativeUnit_' + it] = _id
	}
	// Sammle ID für Kreis/Region
	collect.kreis[upperLevelUnit] &lt;&lt; _id
	
	// speichere aggregierte Geometrie für Bildung von Kreis/Region
	collect.LowerLevelGeometrien[upperLevelUnit] &lt;&lt; union
}

</core:text>
        </complexParameter>
        <documentation>Erstellt eine `AdministrativeUnit` aus einem `AX_Verwaltungsgemeinschaft`.
Die Geometrie wird aus den über den Schlüssel verknüpften `AX_Flurstueck` zusammengefügt.

Die zur Verwaltungsgemeinschaft zugehörigen Gemeinden werden über `bestehtAus` bestimmt.
Jede der Gemeinden wird als `lowerLevelUnit` referenziert und im Index wird die Information hinterlegt, dass die Gemeinde zu dieser Verwaltungsgemeinschaft gehört.

Die Information über die Zugehörigkeit zur übergeordneten `AdministrativeUnit` (Kreis) wird ebenfalls im Index hinterlegt.</documentation>
    </cell>
    <cell relation="eu.esdihumboldt.cst.functions.groovy.retype" id="C20449391-5bfb-4ec5-b494-dfbac5854cc0" priority="high">
        <source>
            <class>
                <type name="AX_KreisRegionType" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
            </class>
        </source>
        <target>
            <class>
                <type name="AdministrativeUnitType" ns="http://inspire.ec.europa.eu/schemas/au/4.0"/>
            </class>
        </target>
        <complexParameter name="script">
            <core:text xmlns:core="http://www.esdi-humboldt.eu/hale/core" xml:space="preserve">
import com.vividsolutions.jts.geom.*
import com.vividsolutions.jts.io.WKTReader
import com.vividsolutions.jts.algorithm.CGAlgorithms
import eu.esdihumboldt.hale.common.instance.geometry.DefaultGeometryProperty

class Processor {

    static final GeometryFactory factory = new GeometryFactory()
    
    Polygon convert(Polygon p, areaThreshold) {
        if (p.numInteriorRing &gt; 0) {
            // has holes
            LinearRing shell = p.exteriorRing
            List&lt;LinearRing&gt; holes = []
            
            for (int i = 0; i &lt; p.numInteriorRing; i++) {
                LinearRing hole = p.getInteriorRingN(i)
                
                // determine area of hole
                try {
                    double area = CGAlgorithms.signedArea(hole.coordinates)
                    // println "Area of hole: $area"
                    if (Math.abs(area) &gt; areaThreshold) {
                        // keep hole
                        holes &lt;&lt; hole
                        _log.info("Loch in AdministrativeUnit mit Fläche ${area} beibehalten")
                    }
                    else {
                        // throw hole away
                    }
                } catch (Exception e) {
                    // ignore
                }
            }
            
            factory.createPolygon(shell, holes.toArray(new LinearRing[holes.size()]))
        }
        else {
            // no holes
            p
        }
    }
    
    MultiPolygon convert(MultiPolygon mp, areaThreshold) {
        if (mp.numGeometries) {
            Polygon[] polygons = new Polygon[mp.numGeometries]
            for (int i = 0; i &lt; mp.numGeometries; i++) {
                polygons[i] = convert(mp.getGeometryN(i), areaThreshold)
            }
            factory.createMultiPolygon(polygons)
        }
        else {
            // empty
            mp
        }
    }
    
    Geometry convert(Geometry g, areaThreshold) {
        // nothing to do
        g
    }

}

def _id = 'AdministrativeUnit_' + _source.p.schluesselGesamt.value()

// Geometrien aus Lower Level Unit
def geoms = _.context.collector().LowerLevelGeometrien[_id].clear()

// führe den Join nicht aus wenn keine assoziierten Flurstücke
// mit entsprechender Geometrie vorhanden sind
if (!geoms) {
	throw new NoResultException()
}

def collect
withTransformationContext {
	collect = _.context.collector(it)
}

// bestimme upperLevelUnit, sammle ID
def land = _source.p.schluessel.AX_Kreis_Schluessel.land.value()
def regBezirk = _source.p.schluessel.AX_Kreis_Schluessel.regierungsbezirk.value()
def upperLevelUnit
if (regBezirk &amp;&amp; regBezirk != '0') {
	upperLevelUnit = 'AdministrativeUnit_' + land + regBezirk
	collect.regBezirk[upperLevelUnit] &lt;&lt; _id
}
else {
	upperLevelUnit = 'AdministrativeUnit_' + land
	collect.land[upperLevelUnit] &lt;&lt; _id
}

def union = _.geom.union(geoms)

// remove small holes created due to interpolation
def g = union.geometry
g = new Processor().convert(g, _project.variables.ERROR_AREA_THRESHOLD as double)
union = new DefaultGeometryProperty(union.CRSDefinition, g)

// speichere aggregierte Geometrie für Bildung von Regierungsbezirk/Land
collect.LowerLevelGeometrien[upperLevelUnit] &lt;&lt; union

_target{
	geometry {
		MultiSurface( union )
	}
	_b.upperLevelUnit {
		href( "#$upperLevelUnit" )
	}
	// gesammelte lowerLevelUnits
	collect.kreis[_id].each { lowerId -&gt;
		lowerLevelUnit {
			href( "#$lowerId" )
		}
	}
}
</core:text>
        </complexParameter>
        <documentation>Erstellt eine `AdministrativeUnit` aus einem `AX_KreisRegion`.
Die Geometrie wird aus den Geometrien der untergeordneten Ebene zusammengefügt.

Die Verknüpfung zur untergeordneten Ebene von `AdministrativeUnit`s wird über die im Index gesammelten Informationen hergestellt.

Die Information über die Zugehörigkeit zur übergeordneten `AdministrativeUnit` (Bundesland oder Regierungsbezirk) und die Geometrie werden im Index hinterlegt.</documentation>
    </cell>
    <cell relation="eu.esdihumboldt.cst.functions.groovy.retype" id="C730641fd-b68b-4b5f-b63b-35e1c9076579" priority="normal">
        <source>
            <class>
                <type name="AX_RegierungsbezirkType" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
            </class>
        </source>
        <target>
            <class>
                <type name="AdministrativeUnitType" ns="http://inspire.ec.europa.eu/schemas/au/4.0"/>
            </class>
        </target>
        <complexParameter name="script">
            <core:text xmlns:core="http://www.esdi-humboldt.eu/hale/core" xml:space="preserve">
import com.vividsolutions.jts.geom.*
import com.vividsolutions.jts.io.WKTReader
import com.vividsolutions.jts.algorithm.CGAlgorithms
import eu.esdihumboldt.hale.common.instance.geometry.DefaultGeometryProperty

class Processor {

    static final GeometryFactory factory = new GeometryFactory()
    
    Polygon convert(Polygon p, areaThreshold) {
        if (p.numInteriorRing &gt; 0) {
            // has holes
            LinearRing shell = p.exteriorRing
            List&lt;LinearRing&gt; holes = []
            
            for (int i = 0; i &lt; p.numInteriorRing; i++) {
                LinearRing hole = p.getInteriorRingN(i)
                
                // determine area of hole
                try {
                    double area = CGAlgorithms.signedArea(hole.coordinates)
                    // println "Area of hole: $area"
                    if (Math.abs(area) &gt; areaThreshold) {
                        // keep hole
                        holes &lt;&lt; hole
                        _log.info("Loch in AdministrativeUnit mit Fläche ${area} beibehalten")
                    }
                    else {
                        // throw hole away
                    }
                } catch (Exception e) {
                    // ignore
                }
            }
            
            factory.createPolygon(shell, holes.toArray(new LinearRing[holes.size()]))
        }
        else {
            // no holes
            p
        }
    }
    
    MultiPolygon convert(MultiPolygon mp, areaThreshold) {
        if (mp.numGeometries) {
            Polygon[] polygons = new Polygon[mp.numGeometries]
            for (int i = 0; i &lt; mp.numGeometries; i++) {
                polygons[i] = convert(mp.getGeometryN(i), areaThreshold)
            }
            factory.createMultiPolygon(polygons)
        }
        else {
            // empty
            mp
        }
    }
    
    Geometry convert(Geometry g, areaThreshold) {
        // nothing to do
        g
    }

}

def _id = 'AdministrativeUnit_' + _source.p.schluesselGesamt.value()

// Geometrien aus Lower Level Unit
def geoms = _.context.collector().LowerLevelGeometrien[_id].clear()

// führe den Join nicht aus wenn keine assoziierten Flurstücke
// mit entsprechender Geometrie vorhanden sind
if (!geoms) {
	throw new NoResultException()
}

def collect
withTransformationContext {
	collect = _.context.collector(it)
}

// bestimme upperLevelUnit, sammle ID
def upperLevelUnit = 'AdministrativeUnit_' + _source.p.schluessel.AX_Regierungsbezirk_Schluessel.land.value()
collect.land[upperLevelUnit] &lt;&lt; _id

def union = _.geom.union(geoms)

// remove small holes created due to interpolation
def g = union.geometry
g = new Processor().convert(g, _project.variables.ERROR_AREA_THRESHOLD as double)
union = new DefaultGeometryProperty(union.CRSDefinition, g)

// speichere aggregierte Geometrie für Bildung von Land
collect.LowerLevelGeometrien[upperLevelUnit] &lt;&lt; union

_target{
	geometry {
		MultiSurface( union )
	}
	_b.upperLevelUnit {
		href( "#$upperLevelUnit" )
	}
	// gesammelte lowerLevelUnits
	collect.regBezirk[_id].each { lowerId -&gt;
		lowerLevelUnit {
			href( "#$lowerId" )
		}
	}
}
</core:text>
        </complexParameter>
        <documentation>Erstellt eine `AdministrativeUnit` aus einem `AX_Regierungsbezirk`.
Die Geometrie wird aus den Geometrien der untergeordneten Ebene zusammengefügt.

Die Verknüpfung zur untergeordneten Ebene von `AdministrativeUnit`s wird über die im Index gesammelten Informationen hergestellt.

Die Information über die Zugehörigkeit zur übergeordneten `AdministrativeUnit` (Bundesland) und die Geometrie werden im Index hinterlegt.</documentation>
    </cell>
    <cell relation="eu.esdihumboldt.hale.align.assign.bound" id="C8dac57f2-ccc4-4666-997a-6900aedfd82a" priority="normal">
        <source name="anchor">
            <property>
                <type name="AX_BundeslandType" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                <child name="id" ns="http://www.opengis.net/gml/3.2"/>
            </property>
        </source>
        <target>
            <property>
                <type name="AdministrativeUnitType" ns="http://inspire.ec.europa.eu/schemas/au/4.0"/>
                <child name="upperLevelUnit" ns="http://inspire.ec.europa.eu/schemas/au/4.0"/>
                <child name="href" ns="http://www.w3.org/1999/xlink"/>
            </property>
        </target>
        <parameter value="https://sgx.geodatenzentrum.de/wfs_dlm250_inspire?SERVICE=WFS&amp;VERSION=2.0.0&amp;REQUEST=GetFeature&amp;OUTPUTFORMAT=text/xml;%20subtype=gml/3.2.1&amp;STOREDQUERY_ID=urn:ogc:def:query:OGC-WFS::GetFeatureById&amp;ID=DLM250_AdministrativeUnit_000000000000#DLM250_AdministrativeUnit_000000000000" name="value"/>
    </cell>
    <modifier cell="ba1:C121e3917-16e0-4cba-87db-8a21b67b8c60">
        <disable-for parent="C153144ee-8008-471c-a689-adba7e1d10b7"/>
    </modifier>
    <modifier cell="ba1:C82252143-7abc-4d35-bd5f-7c91b9acd599">
        <disable-for parent="C153144ee-8008-471c-a689-adba7e1d10b7"/>
    </modifier>
    <modifier cell="ba1:Ca38b3568-15b1-4472-a4fc-c6ef492c5344">
        <disable-for parent="C153144ee-8008-471c-a689-adba7e1d10b7"/>
    </modifier>
    <modifier cell="ba1:Caa605b44-05cd-4a95-8df1-68e6f85eecf8">
        <disable-for parent="C153144ee-8008-471c-a689-adba7e1d10b7"/>
    </modifier>
    <modifier cell="ba1:Cb517321b-4e19-4fdd-bb36-41584acd28c3">
        <disable-for parent="C153144ee-8008-471c-a689-adba7e1d10b7"/>
    </modifier>
    <modifier cell="ba1:Cbd879726-8cea-4184-9cf3-74593fce4479">
        <disable-for parent="C153144ee-8008-471c-a689-adba7e1d10b7"/>
    </modifier>
    <modifier cell="ba1:Ccef5cb84-463f-48e8-82cb-646e5f1d8032">
        <disable-for parent="C153144ee-8008-471c-a689-adba7e1d10b7"/>
    </modifier>
    <modifier cell="ba1:Cd866ada4-43ad-47dd-963d-a2d48a11c40c">
        <disable-for parent="C153144ee-8008-471c-a689-adba7e1d10b7"/>
    </modifier>
    <modifier cell="ba1:Cf85a35bd-9ee7-42b9-9413-0d329ffb8a49">
        <disable-for parent="C153144ee-8008-471c-a689-adba7e1d10b7"/>
    </modifier>
</alignment>
