<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<alignment xmlns="http://www.esdi-humboldt.eu/hale/alignment">
    <base prefix="ba1" location="../base-tn.halex.alignment.xml"/>
    <base prefix="ba2" location="../base-functions.halex.alignment.xml"/>
    <cell relation="eu.esdihumboldt.cst.functions.groovy.retype" id="C558a31e8-53bb-4a3e-9b24-bf4fd7211c13" priority="highest">
        <source>
            <class>
                <type name="AX_LagebezeichnungKatalogeintragType" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
            </class>
        </source>
        <target>
            <class>
                <type name="AbstractFeatureType" ns="http://www.opengis.net/gml/3.2"/>
            </class>
        </target>
        <complexParameter name="script">
            <core:text xmlns:core="http://www.esdi-humboldt.eu/hale/core" xml:space="preserve">
def name = _source.p.bezeichnung.value()&#13;
def schluessel = _source.p.schluesselGesamt.value()&#13;
&#13;
withTransformationContext {&#13;
  def collect = _.context.collector(it)&#13;
  &#13;
  // Name zu Schlüssel der Lagebezeichnung im Index ablegen&#13;
  collect.lagebezeichnung[schluessel] = name&#13;
}&#13;

</core:text>
        </complexParameter>
    </cell>
    <cell relation="eu.esdihumboldt.cst.functions.groovy.retype" id="Cd2d3c726-c951-484a-8bb0-c17504676eeb" priority="normal">
        <source>
            <class>
                <type name="AX_FlugverkehrType" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
            </class>
        </source>
        <target>
            <class>
                <type name="AerodromeAreaType" ns="http://inspire.ec.europa.eu/schemas/tn-a/4.0"/>
            </class>
        </target>
        <complexParameter name="script">
            <core:text xmlns:core="http://www.esdi-humboldt.eu/hale/core" xml:space="preserve">
def collect
withTransformationContext {
	collect = _.context.collector(it)
}


def _id = 'AerodromeArea_' + _source.p.id.value() 

_target {
}

// bestimme AerodromeCategory
def aerodromeCategory
switch(_source.p.art.value()) {
case '5511': // Internationaler Flughafen
	aerodromeCategory = 'international'
	break
case '5510': // Flughafen
	aerodromeCategory = 'domesticNational'
	break
case '5512': // Regionalflughafen
case '5521': // Verkehrslandeplatz
case '5522': // Sonderlandeplatz
case '5530': // Hubschrauberflugplatz
case '5550': // Segelfluggelände
	aerodromeCategory = 'domesticRegional'
	break
}

// bestimme AerodromeType
def aerodromeType
switch(_source.p.art.value()) {
case '5510': // Flughafen
case '5511': // Internationaler Flughafen
case '5512': // Regionalflughafen
	aerodromeType = 'aerodromeHeliport'
	break
case '5513': // Sonderflughafen
case '5521': // Verkehrslandeplatz
case '5522': // Sonderlandeplatz
case '5550': // Segelfluggelände
	aerodromeType = 'landingSite'
	break
case '5530': // Hubschrauberflugplatz
	aerodromeType = 'heliportOnly'
	break
}

// bestimme ConditionOfFacility
def conditionOfFacility = 'functional'
switch (_source.p.zustand.value()) {
case '2100': // Außer Betrieb, stillgelegt, verlassen
	conditionOfFacility = 'disused'
	break
case '4000': // Im Bau
	conditionOfFacility = 'underConstruction'
	break
case '8000': // Erweiterung, Neuansiedlung
	conditionOfFacility = 'projected'
	break
}

/*
 * Sammeln von Informationen bzgl. hatDirektUnten für VerticalPosition
 */
def untenRefs = _source.p.hatDirektUnten.href.values()
def verticalPositions = untenRefs.findResults { identifier -&gt;
	def bwf = collect.bauwerksfunktion[identifier].value()
	if (bwf) {
		switch (bwf) {
		// AX_BauwerkImVerkehrsbereich
		case '1800': // Brücke
		case '1801': // Mehrstöckige Brücke
		case '1802': // Bogenbrücke
		case '1803': // Fachwerkbrücke
		case '1804': // Hängebrücke
		case '1805': // Pontonbrücke
		case '1806': // Drehbrücke
		case '1807': // Hebebrücke
		case '1808': // Zugbrücke
		case '1820': // Steg
		case '1830': // Hochbahn, Hochstraße
		case '1890': // Schleusenkammer
		// AX_BauwerkImGewaesserbereich
		case '2030': // Staumauer
		case '2040': // Staudamm
		case '2050': // Wehr
		case '2060': // Sicherheitstor
		case '2080': // Sperrwerk
			return 'suspendedOrElevated'
		// AX_BauwerkImVerkehrsbereich
		case '1870': // Tunnel, Unterführung
		// AX_BauwerkImGewaesserbereich
		case '2010': // Durchlass
		case '2011': // Rohrdurchlass
		case '2012': // Düker
		case '2070': // Siel
		case '2090': // Schöpfwerk
			return 'underground'
		}
	}
	else {
		null
	}
} as Set
def verticalPosition
if (!verticalPositions) {
	verticalPosition = 'onGroundSurface'
}
else {
	verticalPosition = verticalPositions.iterator().next()
	if (verticalPositions.size() &gt; 1) {
		_log.error('Multiple different values for vertical position of an object: ' + verticalPositions)
	}
}


// Sammle ID für Netzwerk
collect.network &lt;&lt; _id
// Sammle ID für AerodromeCategory
if (aerodromeCategory) {
	collect.aerodromeCategory[aerodromeCategory] &lt;&lt; _id
}
// Sammle ID für AerodromeType
if (aerodromeType) {
	collect.aerodromeType[aerodromeType] &lt;&lt; _id
}
// Sammle ID für ConditionOf(Air)Facility
collect.conditionOfAirFacility[conditionOfFacility] &lt;&lt; _id
// Sammle ID für VerticalPosition
collect.verticalPosition[verticalPosition] &lt;&lt; _id
</core:text>
        </complexParameter>
        <documentation>Erstellt eine `AerodromeArea` aus einem `AX_Flugverkehr`.

Die erstellte `AerodromeArea` wird dem Index von Netzwerk-Elementen hinzugefügt.

Zusätzlich werden folgende Informationen in den entsprechenden Indizes abgelegt:

**AerodromeCategory**

Die *aerodromeCategory* wird wie folgt aus dem Attribut `art` bestimmt:

art | aerodromeCategory
- | -
`5511` *(Internationaler Flughafen)* | `international`
`5510` *(Flughafen)* | `domesticNational`
`5512` *(Regionalflughafen)* | `domesticRegional`
`5520` *(Verkehrslandeplatz)* | `domesticRegional`
`5530` *(Hubschrauberflugplatz)* | `domesticRegional`
`5540` *(Landeplatz, Sonderlandeplatz)* | `domesticRegional`
`5550` *(Segelfluggelände)* | `domesticRegional`

**AerodromeType**

Der *aerodromeType* wird wie folgt aus dem Attribut `art` bestimmt:

art | aerodromeType
- | -
`5510` *(Flughafen)* | `aerodromeHeliport`
`5511` *(Internationaler Flughafen)* | `aerodromeHeliport`
`5512` *(Regionalflughafen)* | `aerodromeHeliport`
`5520` *(Verkehrslandeplatz)* | `landingSite`
`5540` *(Landeplatz, Sonderlandeplatz)* | `landingSite`
`5550` *(Segelfluggelände)* | `landingSite`
`5530` *(Hubschrauberflugplatz)* | `heliportOnly`

**ConditionOfAirFacility**

Die *conditionOfFacility* wird wie folgt aus dem Attribut `zustand` ermittelt:

zustand |conditionOfFacility
- | -
`2100` *(Außer Betrieb, stillgelegt, verlassen)* | `disused`
`4000` *(Im Bau)* | `underConstruction`

In allen anderen Fällen wird *conditionOfFacility* als `functional` angenommen.

**VerticalPosition**

Die *verticalPosition* wird über das Attribut `hatDirektUnten` ermittelt.
Referenzen auf `AX_BauwerkImVerkehrsbereich` und `AX_BauwerkImGewaesserbereich` werden über einen Index nachgeschlagen um die entsprechende `bauwerksfunktion` zu erhalten.
Aus der `bauwerksfunktion` wird der Wert wie folgt ermittelt:

bauwerksfunktion | verticalPosition
- | -
`1800` *(Brücke)* | `suspendedOrElevated`
`1801` *(Mehrstöckige Brücke)* | `suspendedOrElevated`
`1802` *(Bogenbrücke)* | `suspendedOrElevated`
`1803` *(Fachwerkbrücke)* | `suspendedOrElevated`
`1804` *(Hängebrücke)* | `suspendedOrElevated`
`1805` *(Pontonbrücke)* | `suspendedOrElevated`
`1806` *(Drehbrücke)* | `suspendedOrElevated`
`1807` *(Hebebrücke)* | `suspendedOrElevated`
`1808` *(Zugbrücke)* | `suspendedOrElevated`
`1820` *(Steg)* | `suspendedOrElevated`
`1830` *(Hochbahn, Hochstraße)* | `suspendedOrElevated`
`1890` *(Schleusenkammer)* | `suspendedOrElevated`
`2030` *(Staumauer)* | `suspendedOrElevated`
`2040` *(Staudamm)* | `suspendedOrElevated`
`2050` *(Wehr)* | `suspendedOrElevated`
`2060` *(Sicherheitstor)* | `suspendedOrElevated`
`2080` *(Sperrwerk)* | `suspendedOrElevated`
`1870` *(Tunnel, Unterführung)* | `underground`
`2010` *(Durchlass)* | `underground`
`2011` *(Rohrdurchlass)* | `underground`
`2012` *(Düker)* | `underground`
`2070` *(Siel)* | `underground`
`2090` *(Schöpfwerk)* | `underground`

Für alle anderen `bauwerksfunktion`en, Referenzen auf andere Objekte oder auch bei Nicht-Vorhandensein von Referenzen wird der Wert `onGroundSurface` angenommen. Bei mehreren verschiedenen Referenzen haben `suspendedOrElevated` und `underground` Vorrang vor `onGroundSurface`.</documentation>
    </cell>
    <cell relation="eu.esdihumboldt.cst.functions.groovy.retype" id="Cc7bb4b8b-965c-4b8f-8d2d-6848f95fdfe3" priority="normal">
        <source>
            <class>
                <type name="AX_FlugverkehrsanlageType" ns="http://www.adv-online.de/namespaces/adv/gid/7.1">
                    <condition lang="ECQL">art = '5560'</condition>
                </type>
            </class>
        </source>
        <target>
            <class>
                <type name="AerodromeAreaType" ns="http://inspire.ec.europa.eu/schemas/tn-a/4.0"/>
            </class>
        </target>
        <complexParameter name="script">
            <core:text xmlns:core="http://www.esdi-humboldt.eu/hale/core" xml:space="preserve">
def collect&#13;
withTransformationContext {&#13;
	collect = _.context.collector(it)&#13;
}&#13;
&#13;
&#13;
def _id = 'AerodromeArea_' + _source.p.id.value() &#13;
&#13;
_target {&#13;
}&#13;
&#13;
// bestimme AerodromeType&#13;
def aerodromeType = 'landingSite'&#13;
&#13;
// bestimme ConditionOfFacility&#13;
def conditionOfFacility = 'functional'&#13;
switch (_source.p.zustand.value()) {&#13;
case '2100': // Außer Betrieb, stillgelegt, verlassen&#13;
	conditionOfFacility = 'disused'&#13;
	break&#13;
case '4000': // Im Bau&#13;
	conditionOfFacility = 'underConstruction'&#13;
	break&#13;
case '8000': // Erweiterung, Neuansiedlung&#13;
	conditionOfFacility = 'projected'&#13;
	break&#13;
}&#13;
&#13;
/*&#13;
 * Sammeln von Informationen bzgl. hatDirektUnten für VerticalPosition&#13;
 */&#13;
def untenRefs = _source.p.hatDirektUnten.href.values()&#13;
def verticalPositions = untenRefs.findResults { identifier -&gt;&#13;
	def bwf = collect.bauwerksfunktion[identifier].value()&#13;
	if (bwf) {&#13;
		switch (bwf) {&#13;
		// AX_BauwerkImVerkehrsbereich&#13;
		case '1800': // Brücke&#13;
		case '1801': // Mehrstöckige Brücke&#13;
		case '1802': // Bogenbrücke&#13;
		case '1803': // Fachwerkbrücke&#13;
		case '1804': // Hängebrücke&#13;
		case '1805': // Pontonbrücke&#13;
		case '1806': // Drehbrücke&#13;
		case '1807': // Hebebrücke&#13;
		case '1808': // Zugbrücke&#13;
		case '1820': // Steg&#13;
		case '1830': // Hochbahn, Hochstraße&#13;
		case '1890': // Schleusenkammer&#13;
		// AX_BauwerkImGewaesserbereich&#13;
		case '2030': // Staumauer&#13;
		case '2040': // Staudamm&#13;
		case '2050': // Wehr&#13;
		case '2060': // Sicherheitstor&#13;
		case '2080': // Sperrwerk&#13;
			return 'suspendedOrElevated'&#13;
		// AX_BauwerkImVerkehrsbereich&#13;
		case '1870': // Tunnel, Unterführung&#13;
		// AX_BauwerkImGewaesserbereich&#13;
		case '2010': // Durchlass&#13;
		case '2011': // Rohrdurchlass&#13;
		case '2012': // Düker&#13;
		case '2070': // Siel&#13;
		case '2090': // Schöpfwerk&#13;
			return 'underground'&#13;
		}&#13;
	}&#13;
	else {&#13;
		null&#13;
	}&#13;
} as Set&#13;
def verticalPosition&#13;
if (!verticalPositions) {&#13;
	verticalPosition = 'onGroundSurface'&#13;
}&#13;
else {&#13;
	verticalPosition = verticalPositions.iterator().next()&#13;
	if (verticalPositions.size() &gt; 1) {&#13;
		_log.error('Multiple different values for vertical position of an object: ' + verticalPositions)&#13;
	}&#13;
}&#13;
&#13;
&#13;
// Sammle ID für Netzwerk&#13;
collect.network &lt;&lt; _id&#13;
// Sammle ID für AerodromeCategory&#13;
if (aerodromeCategory) {&#13;
	collect.aerodromeCategory[aerodromeCategory] &lt;&lt; _id&#13;
}&#13;
// Sammle ID für AerodromeType&#13;
if (aerodromeType) {&#13;
	collect.aerodromeType[aerodromeType] &lt;&lt; _id&#13;
}&#13;
// Sammle ID für ConditionOf(Air)Facility&#13;
collect.conditionOfAirFacility[conditionOfFacility] &lt;&lt; _id&#13;
// Sammle ID für VerticalPosition&#13;
collect.verticalPosition[verticalPosition] &lt;&lt; _id&#13;

</core:text>
        </complexParameter>
    </cell>
    <cell relation="custom:alignment:adv.inspire.namespace" id="C1b0796d8-8a2e-48bc-b165-e88ffc8e52ae" priority="normal">
        <target>
            <property>
                <type name="AerodromeAreaType" ns="http://inspire.ec.europa.eu/schemas/tn-a/4.0"/>
                <child name="inspireId" ns="http://inspire.ec.europa.eu/schemas/net/4.0"/>
                <child name="Identifier" ns="http://inspire.ec.europa.eu/schemas/base/3.3"/>
                <child name="namespace" ns="http://inspire.ec.europa.eu/schemas/base/3.3"/>
            </property>
        </target>
    </cell>
    <cell relation="eu.esdihumboldt.cst.functions.groovy.create" id="C29954e8c-8766-4a4a-9dbb-4e3371b9adff" priority="low">
        <target>
            <class>
                <type name="AerodromeCategoryType" ns="http://inspire.ec.europa.eu/schemas/tn-a/4.0"/>
            </class>
        </target>
        <complexParameter name="script">
            <core:text xmlns:core="http://www.esdi-humboldt.eu/hale/core" xml:space="preserve">
// Die Code-Liste für AerodromeCategory
def codeList = 'http://inspire.ec.europa.eu/codelist/AerodromeCategoryValue'

def collect
withTransformationContext {
	collect = _.context.collector(it)
}

// Erstelle ein AerodromeCategory-Objekt für jeden vorkommenden Wert
//
// Inhalt der hier gesetzt wird sind die Identifier und die Verknüpfungen
// zu den entsprechenden Netzwerk-Elementen
collect.aerodromeCategory.consume { key, values -&gt;
	def _id = 'AerodromeCategory_' + key
	def _ns = _project.vars.INSPIRE_NAMESPACE
	
	_target {
		aerodromeCategory {
			href( "$codeList/$key" )
		}
		id( _id )
		inspireId {
			Identifier {
				namespace( _ns )
				localId( _id )
			}
		}
		identifier( _ns ? (_ns.endsWith('/') ? _ns : _ns + '/') + _id : _id ) {
			codeSpace( 'http://inspire.ec.europa.eu/ids' )
		}
		
		// Referenz zu gesammelten Netzwerk-Elementen mit dieser Eigenschaft
		values.each { linkId -&gt;
			networkRef {
				NetworkReference {
					element {
						href( "#$linkId" )
					}
				}
			}
		}
	}
}
</core:text>
        </complexParameter>
        <documentation>Erstellt ein `AerodromeCategory`-Objekt für jeden in den Daten vorkommenden Wert der [AerodromeCategoryValue Code-Liste](http://inspire.ec.europa.eu/codelist/AerodromeCategoryValue).

Die INSPIRE localId und die GML id werden dabei basierend auf dem Namen der Objektart und dem repräsentierten Code-Listen Wert gebildet, z.B. `AerodromeCategory_international`.

Es werden Referenzen (NetworkReference) zu allen Netzwerk-Elementen (z.B. `AerodromeArea`) erstellt, welche die entsprechende Eigenschaft aufweisen. Diese Information wurde zuvor beim Erstellen dieser Features in einem Index abgelegt.</documentation>
    </cell>
    <cell relation="eu.esdihumboldt.cst.functions.groovy.create" id="C460deb4f-2cdd-443b-8617-8821bdddc061" priority="low">
        <target>
            <class>
                <type name="AerodromeTypeType" ns="http://inspire.ec.europa.eu/schemas/tn-a/4.0"/>
            </class>
        </target>
        <complexParameter name="script">
            <core:text xmlns:core="http://www.esdi-humboldt.eu/hale/core" xml:space="preserve">
// Die Code-Liste für AerodromeType
def codeList = 'http://inspire.ec.europa.eu/codelist/AerodromeTypeValue'

def collect
withTransformationContext {
	collect = _.context.collector(it)
}

// Erstelle ein AerodromeType-Objekt für jeden vorkommenden Wert
//
// Inhalt der hier gesetzt wird sind die Identifier und die Verknüpfungen
// zu den entsprechenden Netzwerk-Elementen
collect.aerodromeType.consume { key, values -&gt;
	def _id = 'AerodromeType_' + key
	def _ns = _project.vars.INSPIRE_NAMESPACE
	
	_target {
		aerodromeType {
			href( "$codeList/$key" )
		}
		id( _id )
		inspireId {
			Identifier {
				namespace( _ns )
				localId( _id )
			}
		}
		identifier( _ns ? (_ns.endsWith('/') ? _ns : _ns + '/') + _id : _id ) {
			codeSpace( 'http://inspire.ec.europa.eu/ids' )
		}
		
		// Referenz zu gesammelten Netzwerk-Elementen mit dieser Eigenschaft
		values.each { linkId -&gt;
			networkRef {
				NetworkReference {
					element {
						href( "#$linkId" )
					}
				}
			}
		}
	}
}
</core:text>
        </complexParameter>
        <documentation>Erstellt ein `AerodromeType`-Objekt für jeden in den Daten vorkommenden Wert der [AerodromeTypeValue Code-Liste](http://inspire.ec.europa.eu/codelist/AerodromeTypeValue).

Die INSPIRE localId und die GML id werden dabei basierend auf dem Namen der Objektart und dem repräsentierten Code-Listen Wert gebildet, z.B. `AerodromeType_landingSite`.

Es werden Referenzen (NetworkReference) zu allen Netzwerk-Elementen (z.B. `AerodromeArea`) erstellt, welche die entsprechende Eigenschaft aufweisen. Diese Information wurde zuvor beim Erstellen dieser Features in einem Index abgelegt.</documentation>
    </cell>
    <cell relation="eu.esdihumboldt.cst.functions.groovy.retype" id="Ca317d4ab-58b3-461c-8cec-a1cbfc9cd30e" priority="normal">
        <source>
            <class>
                <type name="AX_FlugverkehrsanlageType" ns="http://www.adv-online.de/namespaces/adv/gid/7.1">
                    <condition lang="CQL">art = '1330'</condition>
                </type>
            </class>
        </source>
        <target>
            <class>
                <type name="ApronAreaType" ns="http://inspire.ec.europa.eu/schemas/tn-a/4.0"/>
            </class>
        </target>
        <complexParameter name="script">
            <core:text xmlns:core="http://www.esdi-humboldt.eu/hale/core" xml:space="preserve">
def collect
withTransformationContext {
	collect = _.context.collector(it)
}

// nur Objekt mit flächenartigen Geometrien behandeln
def geometries = _.geom.findPolygons(_source.p.position.first())

// Ziel unterstützt keine MultiSurfaces
def surfaces = _.geom.splitMulti(geometries)

// Builder konfigurieren
// - Zuweisung der Geometrie auf Ebene von geometry zulassen
_b.strictValueFlags = false

// Identifier des Quell-Objekts
def sourceId = _source.p.id.value()

// bestimme SurfaceComposition
def surfaceComposition
switch(_source.p.oberflaechenmaterial.value()) {
case '1210': // Gras, Rasen
	surfaceComposition = 'grass'
	break
case '1220': // Beton
	surfaceComposition = 'concrete'
	break
case '1230': // Bitumen, Asphalt
	surfaceComposition = 'asphalt'
	break
}

/*
 * Sammeln von Informationen bzgl. hatDirektUnten für VerticalPosition
 */
def untenRefs = _source.p.hatDirektUnten.href.values()
def verticalPositions = untenRefs.findResults { identifier -&gt;
	def bwf = collect.bauwerksfunktion[identifier].value()
	if (bwf) {
		switch (bwf) {
		// AX_BauwerkImVerkehrsbereich
		case '1800': // Brücke
		case '1801': // Mehrstöckige Brücke
		case '1802': // Bogenbrücke
		case '1803': // Fachwerkbrücke
		case '1804': // Hängebrücke
		case '1805': // Pontonbrücke
		case '1806': // Drehbrücke
		case '1807': // Hebebrücke
		case '1808': // Zugbrücke
		case '1820': // Steg
		case '1830': // Hochbahn, Hochstraße
		case '1890': // Schleusenkammer
		// AX_BauwerkImGewaesserbereich
		case '2030': // Staumauer
		case '2040': // Staudamm
		case '2050': // Wehr
		case '2060': // Sicherheitstor
		case '2080': // Sperrwerk
			return 'suspendedOrElevated'
		// AX_BauwerkImVerkehrsbereich
		case '1870': // Tunnel, Unterführung
		// AX_BauwerkImGewaesserbereich
		case '2010': // Durchlass
		case '2011': // Rohrdurchlass
		case '2012': // Düker
		case '2070': // Siel
		case '2090': // Schöpfwerk
			return 'underground'
		}
	}
	else {
		null
	}
} as Set
def verticalPosition
if (!verticalPositions) {
	verticalPosition = 'onGroundSurface'
}
else {
	verticalPosition = verticalPositions.iterator().next()
	if (verticalPositions.size() &gt; 1) {
		_log.error('Multiple different values for vertical position of an object: ' + verticalPositions)
	}
}

// Ziel-Objekt für jede Fläche erstellen
int num = 1
surfaces.each { surface -&gt;
	// ID bestimmen
	def _id = "ApronArea_${sourceId}_${num}"
	def _ns = _project.vars.INSPIRE_NAMESPACE

	// Ziel-Objekt erstellen (IDs und Geometrie)
	_target {
		id( _id )
		inspireId {
			Identifier {
				localId( _id )
				namespace( _ns )
			}
		}
		identifier( _ns ? (_ns.endsWith('/') ? _ns : _ns + '/') + _id : _id ) {
			codeSpace( 'http://inspire.ec.europa.eu/ids' )
		}
		geometry(surface)
	}
	
	// Sammle ID für Netzwerk
	collect.network &lt;&lt; _id
	// Sammle ID für SurfaceComposition
	if (surfaceComposition) {
		collect.surfaceComposition[surfaceComposition] &lt;&lt; _id
	}
	// Sammle ID für Zuordnung zu entsprechender AX_Flugverkehrsanlage
	collect.AX_Flugverkehrsanlage[sourceId] &lt;&lt; _id
	// Sammle ID für VerticalPosition
	collect.verticalPosition[verticalPosition] &lt;&lt; _id

	num++
}
</core:text>
        </complexParameter>
        <documentation>Erstellt `ApronArea`s aus einer `AX_Flugverkehrsanlage` mit `art` *Vorfeld* (`1330`).

Die Geometrie des Quell-Objekts wird untersucht. Nur flächenartige Geometrien werden verwendet. Je individueller Fläche wird eine `ApronArea` erzeugt.

Die lokale ID wird aus dem Namen der Ziel-Objektart, der AAA-ObjektID des Quell-Objekts und einer aufsteigenden Nummer der Fläche (1., 2., etc. Fläche der Geometrie) gebildet. Diese wird für die INSPIRE ID zusammen mit dem vorgegebenen INSPIRE Namespace herangezogen.
Außerdem wird die lokale ID auch als GML `id` verwendet und der GML `identifier` wird aus der Kombination von Namespace und lokaler ID gebildet.

Die erstellte `ApronArea` wird dem Index von allen Netzwerk-Elementen, sowie dem Index von Netzwerk-Elementen die aus der gleichen `AX_Flugverkehrsanlage` erstellt wurden, hinzugefügt.

Zusätzlich werden folgende Informationen in den entsprechenden Indizes abgelegt:

**SurfaceComposition**

Die *surfaceComposition* wird wie folgt aus dem Attribut `oberflaechenmaterial` bestimmt:

oberflaechenmaterial | surfaceComposition
- | -
`1210` *(Gras, Rasen)* | `grass`
`1220` *(Beton)* | `concrete`
`1230` *(Bitumen, Asphalt)* | `asphalt`

**VerticalPosition**

Die *verticalPosition* wird über das Attribut `hatDirektUnten` ermittelt.
Referenzen auf `AX_BauwerkImVerkehrsbereich` und `AX_BauwerkImGewaesserbereich` werden über einen Index nachgeschlagen um die entsprechende `bauwerksfunktion` zu erhalten.
Aus der `bauwerksfunktion` wird der Wert wie folgt ermittelt:

bauwerksfunktion | verticalPosition
- | -
`1800` *(Brücke)* | `suspendedOrElevated`
`1801` *(Mehrstöckige Brücke)* | `suspendedOrElevated`
`1802` *(Bogenbrücke)* | `suspendedOrElevated`
`1803` *(Fachwerkbrücke)* | `suspendedOrElevated`
`1804` *(Hängebrücke)* | `suspendedOrElevated`
`1805` *(Pontonbrücke)* | `suspendedOrElevated`
`1806` *(Drehbrücke)* | `suspendedOrElevated`
`1807` *(Hebebrücke)* | `suspendedOrElevated`
`1808` *(Zugbrücke)* | `suspendedOrElevated`
`1820` *(Steg)* | `suspendedOrElevated`
`1830` *(Hochbahn, Hochstraße)* | `suspendedOrElevated`
`1890` *(Schleusenkammer)* | `suspendedOrElevated`
`2030` *(Staumauer)* | `suspendedOrElevated`
`2040` *(Staudamm)* | `suspendedOrElevated`
`2050` *(Wehr)* | `suspendedOrElevated`
`2060` *(Sicherheitstor)* | `suspendedOrElevated`
`2080` *(Sperrwerk)* | `suspendedOrElevated`
`1870` *(Tunnel, Unterführung)* | `underground`
`2010` *(Durchlass)* | `underground`
`2011` *(Rohrdurchlass)* | `underground`
`2012` *(Düker)* | `underground`
`2070` *(Siel)* | `underground`
`2090` *(Schöpfwerk)* | `underground`

Für alle anderen `bauwerksfunktion`en, Referenzen auf andere Objekte oder auch bei Nicht-Vorhandensein von Referenzen wird der Wert `onGroundSurface` angenommen. Bei mehreren verschiedenen Referenzen haben `suspendedOrElevated` und `underground` Vorrang vor `onGroundSurface`.</documentation>
    </cell>
    <cell relation="eu.esdihumboldt.cst.functions.groovy.create" id="C4e94b346-a202-4024-9b96-5f8ccb9239ff" priority="low">
        <target>
            <class>
                <type name="ConditionOfAirFacilityType" ns="http://inspire.ec.europa.eu/schemas/tn-a/4.0"/>
            </class>
        </target>
        <complexParameter name="script">
            <core:text xmlns:core="http://www.esdi-humboldt.eu/hale/core" xml:space="preserve">
// Die Code-Liste für ConditionOf(Air)Facility
def codeList = 'http://inspire.ec.europa.eu/codelist/ConditionOfFacilityValue'

def collect
withTransformationContext {
	collect = _.context.collector(it)
}

// Erstelle ein ConditionOfAirFacility-Objekt für jeden vorkommenden Wert
//
// Inhalt der hier gesetzt wird sind die Identifier und die Verknüpfungen
// zu den entsprechenden Netzwerk-Elementen
collect.conditionOfAirFacility.consume { key, values -&gt;
	def _id = 'ConditionOfAirFacility_' + key
	def _ns = _project.vars.INSPIRE_NAMESPACE
	
	_target {
		currentStatus {
			href( "$codeList/$key" )
		}
		id( _id )
		inspireId {
			Identifier {
				namespace( _ns )
				localId( _id )
			}
		}
		identifier( _ns ? (_ns.endsWith('/') ? _ns : _ns + '/') + _id : _id ) {
			codeSpace( 'http://inspire.ec.europa.eu/ids' )
		}
		
		// Referenz zu gesammelten Netzwerk-Elementen mit dieser Eigenschaft
		values.each { linkId -&gt;
			networkRef {
				NetworkReference {
					element {
						href( "#$linkId" )
					}
				}
			}
		}
	}
}
</core:text>
        </complexParameter>
        <documentation>Erstellt ein `ConditionOfAirFacility`-Objekt für jeden in den Daten vorkommenden Wert der [ConditionOfFacilityValue Code-Liste](http://inspire.ec.europa.eu/codelist/ConditionOfFacilityValue).

Die INSPIRE localId und die GML id werden dabei basierend auf dem Namen der Objektart und dem repräsentierten Code-Listen Wert gebildet, z.B. `ConditionOfAirFacility_functional`.

Es werden Referenzen (NetworkReference) zu allen Netzwerk-Elementen (z.B. `AerodromeArea`) erstellt, welche die entsprechende Eigenschaft aufweisen. Diese Information wurde zuvor beim Erstellen dieser Features in einem Index abgelegt.</documentation>
    </cell>
    <cell relation="eu.esdihumboldt.cst.functions.groovy.retype" id="Cbfe48734-25e9-488c-bb87-cb9913240d13" priority="low">
        <source>
            <class>
                <type name="AX_FlugverkehrsanlageType" ns="http://www.adv-online.de/namespaces/adv/gid/7.1">
                    <condition lang="CQL">breiteDesObjekts is not null and (art = '1310' or art = '1320')</condition>
                </type>
            </class>
        </source>
        <target>
            <class>
                <type name="ElementWidthType" ns="http://inspire.ec.europa.eu/schemas/tn-a/4.0"/>
            </class>
        </target>
        <complexParameter name="script">
            <core:text xmlns:core="http://www.esdi-humboldt.eu/hale/core" xml:space="preserve">
def collect
withTransformationContext {
	collect = _.context.collector(it)
}

// ID des Quell-Objekts
def sourceId = _source.p.id.value()

_target {
	// Referenz zu jedem NetworkElement das aus der Flugverkehrs-
	// anlage abgeleitet wurde
	collect.AX_Flugverkehrsanlage[sourceId].each { elementId -&gt;
		networkRef {
			NetworkReference {
				element {
					href( "#$elementId" )
				}
			}
		}
	}
}
</core:text>
        </complexParameter>
        <documentation>Erstellt ein `ElementWidth`-Objekt für eine `AX_Flugverkehrsanlage` mit vorhandener `breiteDesObjekts`.

Die Referenzen zu den Netzwerk-Elementen mit dieser Eigenschaft wird über die GML ids der Objekte hergestellt, die bei Erstellung in einem Index abgelegt wurden.</documentation>
    </cell>
    <cell relation="custom:alignment:adv.inspire.id.default" id="C416dabd3-d1e8-4fa5-8091-ccf6f223ff82" priority="normal">
        <source name="id">
            <property>
                <type name="AX_FlugverkehrsanlageType" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                <child name="id" ns="http://www.opengis.net/gml/3.2"/>
            </property>
        </source>
        <target>
            <property>
                <type name="ElementWidthType" ns="http://inspire.ec.europa.eu/schemas/tn-a/4.0"/>
                <child name="id" ns="http://www.opengis.net/gml/3.2"/>
            </property>
        </target>
    </cell>
    <cell relation="custom:alignment:adv.inspire.identifier" id="Cab4ed7c4-66f5-4506-aff9-60d7b02f19c8" priority="normal">
        <source name="id">
            <property>
                <type name="AX_FlugverkehrsanlageType" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                <child name="id" ns="http://www.opengis.net/gml/3.2"/>
            </property>
        </source>
        <target>
            <property>
                <type name="ElementWidthType" ns="http://inspire.ec.europa.eu/schemas/tn-a/4.0"/>
                <child name="identifier" ns="http://www.opengis.net/gml/3.2"/>
            </property>
        </target>
    </cell>
    <cell relation="custom:alignment:adv.inspire.id.default" id="C0f4e1c8d-fcf7-4b47-b137-5aaeda71ca57" priority="normal">
        <source name="id">
            <property>
                <type name="AX_FlugverkehrsanlageType" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                <child name="id" ns="http://www.opengis.net/gml/3.2"/>
            </property>
        </source>
        <target>
            <property>
                <type name="ElementWidthType" ns="http://inspire.ec.europa.eu/schemas/tn-a/4.0"/>
                <child name="inspireId" ns="http://inspire.ec.europa.eu/schemas/net/4.0"/>
                <child name="Identifier" ns="http://inspire.ec.europa.eu/schemas/base/3.3"/>
                <child name="localId" ns="http://inspire.ec.europa.eu/schemas/base/3.3"/>
            </property>
        </target>
    </cell>
    <cell relation="custom:alignment:adv.inspire.namespace" id="Ce2b488b6-3928-4b81-bf6f-5dab80e42b96" priority="normal">
        <target>
            <property>
                <type name="ElementWidthType" ns="http://inspire.ec.europa.eu/schemas/tn-a/4.0"/>
                <child name="inspireId" ns="http://inspire.ec.europa.eu/schemas/net/4.0"/>
                <child name="Identifier" ns="http://inspire.ec.europa.eu/schemas/base/3.3"/>
                <child name="namespace" ns="http://inspire.ec.europa.eu/schemas/base/3.3"/>
            </property>
        </target>
    </cell>
    <cell relation="eu.esdihumboldt.hale.align.rename" id="C6c636244-2269-419c-9d78-61d730a7a834" priority="normal">
        <source>
            <property>
                <type name="AX_FlugverkehrsanlageType" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                <child name="breiteDesObjekts" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
            </property>
        </source>
        <target>
            <property>
                <type name="ElementWidthType" ns="http://inspire.ec.europa.eu/schemas/tn-a/4.0"/>
                <child name="width" ns="http://inspire.ec.europa.eu/schemas/tn-a/4.0"/>
            </property>
        </target>
        <parameter value="false" name="ignoreNamespaces"/>
        <parameter value="false" name="structuralRename"/>
    </cell>
    <cell relation="custom:alignment:adv.uom.toucum" id="Cc3659e5d-d3a3-464a-bc59-506edd1b7763" priority="normal">
        <source name="uom">
            <property>
                <type name="AX_FlugverkehrsanlageType" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                <child name="breiteDesObjekts" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                <child name="uom"/>
            </property>
        </source>
        <target>
            <property>
                <type name="ElementWidthType" ns="http://inspire.ec.europa.eu/schemas/tn-a/4.0"/>
                <child name="width" ns="http://inspire.ec.europa.eu/schemas/tn-a/4.0"/>
                <child name="uom"/>
            </property>
        </target>
    </cell>
    <cell relation="eu.esdihumboldt.hale.align.rename" id="C1b49d11f-6391-4a48-b2d0-ff215716d3c2" priority="normal">
        <source>
            <property>
                <type name="AA_ObjektType" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                <child name="lebenszeitintervall" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                <child name="AA_Lebenszeitintervall" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                <child name="beginnt" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
            </property>
        </source>
        <target>
            <property>
                <type name="NetworkElementType" ns="http://inspire.ec.europa.eu/schemas/net/4.0"/>
                <child name="beginLifespanVersion" ns="http://inspire.ec.europa.eu/schemas/net/4.0"/>
            </property>
        </target>
        <parameter value="false" name="ignoreNamespaces"/>
        <parameter value="false" name="structuralRename"/>
    </cell>
    <cell relation="eu.esdihumboldt.hale.align.rename" id="C52d452c3-a4d1-41f5-b239-de1564584cdb" priority="normal">
        <source>
            <property>
                <type name="AA_ObjektType" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                <child name="lebenszeitintervall" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                <child name="AA_Lebenszeitintervall" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                <child name="endet" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
            </property>
        </source>
        <target>
            <property>
                <type name="NetworkElementType" ns="http://inspire.ec.europa.eu/schemas/net/4.0"/>
                <child name="endLifespanVersion" ns="http://inspire.ec.europa.eu/schemas/net/4.0"/>
            </property>
        </target>
        <parameter value="false" name="ignoreNamespaces"/>
        <parameter value="false" name="structuralRename"/>
    </cell>
    <cell relation="eu.esdihumboldt.cst.functions.groovy.retype" id="Ccaa52a0b-aa46-4373-913d-d52ebe85743c" priority="normal">
        <source>
            <class>
                <type name="AX_FlugverkehrsanlageType" ns="http://www.adv-online.de/namespaces/adv/gid/7.1">
                    <condition lang="ECQL">art = '1310' or art = '5530'</condition>
                </type>
            </class>
        </source>
        <target>
            <class>
                <type name="RunwayAreaType" ns="http://inspire.ec.europa.eu/schemas/tn-a/4.0"/>
            </class>
        </target>
        <complexParameter name="script">
            <core:text xmlns:core="http://www.esdi-humboldt.eu/hale/core" xml:space="preserve">
def collect
withTransformationContext {
	collect = _.context.collector(it)
}

// nur Objekt mit flächenartigen Geometrien behandeln
def geometries = _.geom.findPolygons(_source.p.position.first())

// Ziel unterstützt keine MultiSurfaces
def surfaces = _.geom.splitMulti(geometries)

// Builder konfigurieren
// - Zuweisung der Geometrie auf Ebene von geometry zulassen
_b.strictValueFlags = false

// Identifier des Quell-Objekts
def sourceId = _source.p.id.value()

// bestimme SurfaceComposition
def surfaceComposition
switch(_source.p.oberflaechenmaterial.value()) {
case '1210': // Gras, Rasen
	surfaceComposition = 'grass'
	break
case '1220': // Beton
	surfaceComposition = 'concrete'
	break
case '1230': // Bitumen, Asphalt
	surfaceComposition = 'asphalt'
	break
}

/*
 * Sammeln von Informationen bzgl. hatDirektUnten für VerticalPosition
 */
def untenRefs = _source.p.hatDirektUnten.href.values()
def verticalPositions = untenRefs.findResults { identifier -&gt;
	def bwf = collect.bauwerksfunktion[identifier].value()
	if (bwf) {
		switch (bwf) {
		// AX_BauwerkImVerkehrsbereich
		case '1800': // Brücke
		case '1801': // Mehrstöckige Brücke
		case '1802': // Bogenbrücke
		case '1803': // Fachwerkbrücke
		case '1804': // Hängebrücke
		case '1805': // Pontonbrücke
		case '1806': // Drehbrücke
		case '1807': // Hebebrücke
		case '1808': // Zugbrücke
		case '1820': // Steg
		case '1830': // Hochbahn, Hochstraße
		case '1890': // Schleusenkammer
		// AX_BauwerkImGewaesserbereich
		case '2030': // Staumauer
		case '2040': // Staudamm
		case '2050': // Wehr
		case '2060': // Sicherheitstor
		case '2080': // Sperrwerk
			return 'suspendedOrElevated'
		// AX_BauwerkImVerkehrsbereich
		case '1870': // Tunnel, Unterführung
		// AX_BauwerkImGewaesserbereich
		case '2010': // Durchlass
		case '2011': // Rohrdurchlass
		case '2012': // Düker
		case '2070': // Siel
		case '2090': // Schöpfwerk
			return 'underground'
		}
	}
	else {
		null
	}
} as Set
def verticalPosition
if (!verticalPositions) {
	verticalPosition = 'onGroundSurface'
}
else {
	verticalPosition = verticalPositions.iterator().next()
	if (verticalPositions.size() &gt; 1) {
		_log.error('Multiple different values for vertical position of an object: ' + verticalPositions)
	}
}

// Ziel-Objekt für jede Fläche erstellen
int num = 1
surfaces.each { surface -&gt;
	// ID bestimmen
	def _id = "RunwayArea_${sourceId}_${num}"
	def _ns = _project.vars.INSPIRE_NAMESPACE

	// Ziel-Objekt erstellen (IDs und Geometrie)
	_target {
		id( _id )
		inspireId {
			Identifier {
				localId( _id )
				namespace( _ns )
			}
		}
		identifier( _ns ? (_ns.endsWith('/') ? _ns : _ns + '/') + _id : _id ) {
			codeSpace( 'http://inspire.ec.europa.eu/ids' )
		}
		geometry(surface)
	}
	
	// Sammle ID für Netzwerk
	collect.network &lt;&lt; _id
	// Sammle ID für SurfaceComposition
	if (surfaceComposition) {
		collect.surfaceComposition[surfaceComposition] &lt;&lt; _id
	}
	// Sammle ID für Zuordnung zu entsprechender AX_Flugverkehrsanlage
	collect.AX_Flugverkehrsanlage[sourceId] &lt;&lt; _id
	// Sammle ID für VerticalPosition
	collect.verticalPosition[verticalPosition] &lt;&lt; _id

	num++
}
</core:text>
        </complexParameter>
        <documentation>Erstellt `RunwayArea`s aus einer `AX_Flugverkehrsanlage` mit `art` *Startbahn/Landebahn* (`1310`) oder *Hubschrauberlandeplatz* (`5531`).

Die Geometrie des Quell-Objekts wird untersucht. Nur flächenartige Geometrien werden verwendet. Je individueller Fläche wird eine `RunwayArea` erzeugt.

Die lokale ID wird aus dem Namen der Ziel-Objektart, der AAA-ObjektID des Quell-Objekts und einer aufsteigenden Nummer der Fläche (1., 2., etc. Fläche der Geometrie) gebildet. Diese wird für die INSPIRE ID zusammen mit dem vorgegebenen INSPIRE Namespace herangezogen.
Außerdem wird die lokale ID auch als GML `id` verwendet und der GML `identifier` wird aus der Kombination von Namespace und lokaler ID gebildet.

Die erstellte `RunwayArea` wird dem Index von allen Netzwerk-Elementen, sowie dem Index von Netzwerk-Elementen die aus der gleichen `AX_Flugverkehrsanlage` erstellt wurden, hinzugefügt.

Zusätzlich werden folgende Informationen in den entsprechenden Indizes abgelegt:

**SurfaceComposition**

Die *surfaceComposition* wird wie folgt aus dem Attribut `oberflaechenmaterial` bestimmt:

oberflaechenmaterial | surfaceComposition
- | -
`1210` *(Gras, Rasen)* | `grass`
`1220` *(Beton)* | `concrete`
`1230` *(Bitumen, Asphalt)* | `asphalt`

**VerticalPosition**

Die *verticalPosition* wird über das Attribut `hatDirektUnten` ermittelt.
Referenzen auf `AX_BauwerkImVerkehrsbereich` und `AX_BauwerkImGewaesserbereich` werden über einen Index nachgeschlagen um die entsprechende `bauwerksfunktion` zu erhalten.
Aus der `bauwerksfunktion` wird der Wert wie folgt ermittelt:

bauwerksfunktion | verticalPosition
- | -
`1800` *(Brücke)* | `suspendedOrElevated`
`1801` *(Mehrstöckige Brücke)* | `suspendedOrElevated`
`1802` *(Bogenbrücke)* | `suspendedOrElevated`
`1803` *(Fachwerkbrücke)* | `suspendedOrElevated`
`1804` *(Hängebrücke)* | `suspendedOrElevated`
`1805` *(Pontonbrücke)* | `suspendedOrElevated`
`1806` *(Drehbrücke)* | `suspendedOrElevated`
`1807` *(Hebebrücke)* | `suspendedOrElevated`
`1808` *(Zugbrücke)* | `suspendedOrElevated`
`1820` *(Steg)* | `suspendedOrElevated`
`1830` *(Hochbahn, Hochstraße)* | `suspendedOrElevated`
`1890` *(Schleusenkammer)* | `suspendedOrElevated`
`2030` *(Staumauer)* | `suspendedOrElevated`
`2040` *(Staudamm)* | `suspendedOrElevated`
`2050` *(Wehr)* | `suspendedOrElevated`
`2060` *(Sicherheitstor)* | `suspendedOrElevated`
`2080` *(Sperrwerk)* | `suspendedOrElevated`
`1870` *(Tunnel, Unterführung)* | `underground`
`2010` *(Durchlass)* | `underground`
`2011` *(Rohrdurchlass)* | `underground`
`2012` *(Düker)* | `underground`
`2070` *(Siel)* | `underground`
`2090` *(Schöpfwerk)* | `underground`

Für alle anderen `bauwerksfunktion`en, Referenzen auf andere Objekte oder auch bei Nicht-Vorhandensein von Referenzen wird der Wert `onGroundSurface` angenommen. Bei mehreren verschiedenen Referenzen haben `suspendedOrElevated` und `underground` Vorrang vor `onGroundSurface`.</documentation>
    </cell>
    <cell relation="eu.esdihumboldt.hale.align.rename" id="Cd911918f-ab41-4a80-9dbb-1723e2b03b74" priority="normal">
        <source>
            <property>
                <type name="AX_FlugverkehrsanlageType" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                <child name="bezeichnung" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
            </property>
        </source>
        <target>
            <property>
                <type name="RunwayAreaType" ns="http://inspire.ec.europa.eu/schemas/tn-a/4.0"/>
                <child name="designator" ns="http://inspire.ec.europa.eu/schemas/tn-a/4.0"/>
            </property>
        </target>
        <parameter value="false" name="ignoreNamespaces"/>
        <parameter value="false" name="structuralRename"/>
    </cell>
    <cell relation="eu.esdihumboldt.hale.align.assign" id="C0c1014d7-111e-4e52-992d-bddb280e74a6" priority="normal">
        <target>
            <property>
                <type name="RunwayAreaType" ns="http://inspire.ec.europa.eu/schemas/tn-a/4.0"/>
                <child name="designator" ns="http://inspire.ec.europa.eu/schemas/tn-a/4.0"/>
                <child name="nilReason"/>
            </property>
        </target>
        <parameter value="unknown" name="value"/>
    </cell>
    <cell relation="eu.esdihumboldt.hale.align.classification" id="C01820847-6dfc-48e0-9fc5-145d4a0d46c3" priority="normal">
        <source>
            <property>
                <type name="AX_FlugverkehrsanlageType" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                <child name="art" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
            </property>
        </source>
        <target>
            <property>
                <type name="RunwayAreaType" ns="http://inspire.ec.europa.eu/schemas/tn-a/4.0"/>
                <child name="runwayType" ns="http://inspire.ec.europa.eu/schemas/tn-a/4.0"/>
                <child name="href" ns="http://www.w3.org/1999/xlink"/>
            </property>
        </target>
        <complexParameter name="lookupTable">
            <lookup-table xmlns:ns2="http://www.esdi-humboldt.eu/hale/alignment" xmlns="">
                <entry>
                    <key value="1310"/>
                    <value value="http://inspire.ec.europa.eu/codelist/RunwayTypeValue/runway"/>
                </entry>
                <entry>
                    <key value="5531"/>
                    <value value="http://inspire.ec.europa.eu/codelist/RunwayTypeValue/FATO"/>
                </entry>
            </lookup-table>
        </complexParameter>
        <parameter value="null" name="notClassifiedAction"/>
    </cell>
    <cell relation="eu.esdihumboldt.cst.functions.groovy.create" id="C0e4df250-2688-47ea-8f06-9b8dfa95f60a" priority="low">
        <target>
            <class>
                <type name="SurfaceCompositionType" ns="http://inspire.ec.europa.eu/schemas/tn-a/4.0"/>
            </class>
        </target>
        <complexParameter name="script">
            <core:text xmlns:core="http://www.esdi-humboldt.eu/hale/core" xml:space="preserve">
// Die Code-Liste für SurfaceComposition
def codeList = 'http://inspire.ec.europa.eu/codelist/SurfaceCompositionValue'

def collect
withTransformationContext {
	collect = _.context.collector(it)
}

// Erstelle ein SurfaceComposition-Objekt für jeden vorkommenden Wert
//
// Inhalt der hier gesetzt wird sind die Identifier und die Verknüpfungen
// zu den entsprechenden Netzwerk-Elementen
collect.surfaceComposition.consume { key, values -&gt;
	def _id = 'SurfaceComposition_' + key
	def _ns = _project.vars.INSPIRE_NAMESPACE
	
	_target {
		surfaceComposition {
			href( "$codeList/$key" )
		}
		id( _id )
		inspireId {
			Identifier {
				namespace( _ns )
				localId( _id )
			}
		}
		identifier( _ns ? (_ns.endsWith('/') ? _ns : _ns + '/') + _id : _id ) {
			codeSpace( 'http://inspire.ec.europa.eu/ids' )
		}
		
		// Referenz zu gesammelten Netzwerk-Elementen mit dieser Eigenschaft
		values.each { linkId -&gt;
			networkRef {
				NetworkReference {
					element {
						href( "#$linkId" )
					}
				}
			}
		}
	}
}
</core:text>
        </complexParameter>
        <documentation>Erstellt ein `SurfaceComposition`-Objekt für jeden in den Daten vorkommenden Wert der [SurfaceCompositionValue Code-Liste](http://inspire.ec.europa.eu/codelist/SurfaceCompositionValue).

Die INSPIRE localId und die GML id werden dabei basierend auf dem Namen der Objektart und dem repräsentierten Code-Listen Wert gebildet, z.B. `SurfaceComposition_concrete`.

Es werden Referenzen (NetworkReference) zu allen Netzwerk-Elementen (z.B. `RunwayArea`s und `TaxiwayArea`s) erstellt, welche die entsprechende Eigenschaft aufweisen. Diese Information wurde zuvor beim Erstellen dieser Features in einem Index abgelegt.</documentation>
    </cell>
    <cell relation="eu.esdihumboldt.cst.functions.groovy.retype" id="C2f4ac65c-9363-468b-843d-9d629339eb39" priority="normal">
        <source>
            <class>
                <type name="AX_FlugverkehrsanlageType" ns="http://www.adv-online.de/namespaces/adv/gid/7.1">
                    <condition lang="CQL">art = '1320'</condition>
                </type>
            </class>
        </source>
        <target>
            <class>
                <type name="TaxiwayAreaType" ns="http://inspire.ec.europa.eu/schemas/tn-a/4.0"/>
            </class>
        </target>
        <complexParameter name="script">
            <core:text xmlns:core="http://www.esdi-humboldt.eu/hale/core" xml:space="preserve">
def collect
withTransformationContext {
	collect = _.context.collector(it)
}

// nur Objekt mit flächenartigen Geometrien behandeln
def geometries = _.geom.findPolygons(_source.p.position.first())

// Ziel unterstützt keine MultiSurfaces
def surfaces = _.geom.splitMulti(geometries)

// Builder konfigurieren
// - Zuweisung der Geometrie auf Ebene von geometry zulassen
_b.strictValueFlags = false

// Identifier des Quell-Objekts
def sourceId = _source.p.id.value()

// bestimme SurfaceComposition
def surfaceComposition
switch(_source.p.oberflaechenmaterial.value()) {
case '1210': // Gras, Rasen
	surfaceComposition = 'grass'
	break
case '1220': // Beton
	surfaceComposition = 'concrete'
	break
case '1230': // Bitumen, Asphalt
	surfaceComposition = 'asphalt'
	break
}

/*
 * Sammeln von Informationen bzgl. hatDirektUnten für VerticalPosition
 */
def untenRefs = _source.p.hatDirektUnten.href.values()
def verticalPositions = untenRefs.findResults { identifier -&gt;
	def bwf = collect.bauwerksfunktion[identifier].value()
	if (bwf) {
		switch (bwf) {
		// AX_BauwerkImVerkehrsbereich
		case '1800': // Brücke
		case '1801': // Mehrstöckige Brücke
		case '1802': // Bogenbrücke
		case '1803': // Fachwerkbrücke
		case '1804': // Hängebrücke
		case '1805': // Pontonbrücke
		case '1806': // Drehbrücke
		case '1807': // Hebebrücke
		case '1808': // Zugbrücke
		case '1820': // Steg
		case '1830': // Hochbahn, Hochstraße
		case '1890': // Schleusenkammer
		// AX_BauwerkImGewaesserbereich
		case '2030': // Staumauer
		case '2040': // Staudamm
		case '2050': // Wehr
		case '2060': // Sicherheitstor
		case '2080': // Sperrwerk
			return 'suspendedOrElevated'
		// AX_BauwerkImVerkehrsbereich
		case '1870': // Tunnel, Unterführung
		// AX_BauwerkImGewaesserbereich
		case '2010': // Durchlass
		case '2011': // Rohrdurchlass
		case '2012': // Düker
		case '2070': // Siel
		case '2090': // Schöpfwerk
			return 'underground'
		}
	}
	else {
		null
	}
} as Set
def verticalPosition
if (!verticalPositions) {
	verticalPosition = 'onGroundSurface'
}
else {
	verticalPosition = verticalPositions.iterator().next()
	if (verticalPositions.size() &gt; 1) {
		_log.error('Multiple different values for vertical position of an object: ' + verticalPositions)
	}
}

// Ziel-Objekt für jede Fläche erstellen
int num = 1
surfaces.each { surface -&gt;
	// ID bestimmen
	def _id = "TaxiwayArea_${sourceId}_${num}"
	def _ns = _project.vars.INSPIRE_NAMESPACE

	// Ziel-Objekt erstellen (IDs und Geometrie)
	_target {
		id( _id )
		inspireId {
			Identifier {
				localId( _id )
				namespace( _ns )
			}
		}
		identifier( _ns ? (_ns.endsWith('/') ? _ns : _ns + '/') + _id : _id ) {
			codeSpace( 'http://inspire.ec.europa.eu/ids' )
		}
		geometry(surface)
	}
	
	// Sammle ID für Netzwerk
	collect.network &lt;&lt; _id
	// Sammle ID für SurfaceComposition
	if (surfaceComposition) {
		collect.surfaceComposition[surfaceComposition] &lt;&lt; _id
	}
	// Sammle ID für Zuordnung zu entsprechender AX_Flugverkehrsanlage
	collect.AX_Flugverkehrsanlage[sourceId] &lt;&lt; _id
	// Sammle ID für VerticalPosition
	collect.verticalPosition[verticalPosition] &lt;&lt; _id

	num++
}
</core:text>
        </complexParameter>
        <documentation>Erstellt `TaxiwayArea`s aus einer `AX_Flugverkehrsanlage` mit `art` *Zurollbahn/Taxiway* (`1320`).

Die Geometrie des Quell-Objekts wird untersucht. Nur flächenartige Geometrien werden verwendet. Je individueller Fläche wird eine `TaxiwayArea` erzeugt.

Die lokale ID wird aus dem Namen der Ziel-Objektart, der AAA-ObjektID des Quell-Objekts und einer aufsteigenden Nummer der Fläche (1., 2., etc. Fläche der Geometrie) gebildet. Diese wird für die INSPIRE ID zusammen mit dem vorgegebenen INSPIRE Namespace herangezogen.
Außerdem wird die lokale ID auch als GML `id` verwendet und der GML `identifier` wird aus der Kombination von Namespace und lokaler ID gebildet.

Die erstellte `TaxiwayArea` wird dem Index von allen Netzwerk-Elementen, sowie dem Index von Netzwerk-Elementen die aus der gleichen `AX_Flugverkehrsanlage` erstellt wurden, hinzugefügt.

Zusätzlich werden folgende Informationen in den entsprechenden Indizes abgelegt:

**SurfaceComposition**

Die *surfaceComposition* wird wie folgt aus dem Attribut `oberflaechenmaterial` bestimmt:

oberflaechenmaterial | surfaceComposition
- | -
`1210` *(Gras, Rasen)* | `grass`
`1220` *(Beton)* | `concrete`
`1230` *(Bitumen, Asphalt)* | `asphalt`

**VerticalPosition**

Die *verticalPosition* wird über das Attribut `hatDirektUnten` ermittelt.
Referenzen auf `AX_BauwerkImVerkehrsbereich` und `AX_BauwerkImGewaesserbereich` werden über einen Index nachgeschlagen um die entsprechende `bauwerksfunktion` zu erhalten.
Aus der `bauwerksfunktion` wird der Wert wie folgt ermittelt:

bauwerksfunktion | verticalPosition
- | -
`1800` *(Brücke)* | `suspendedOrElevated`
`1801` *(Mehrstöckige Brücke)* | `suspendedOrElevated`
`1802` *(Bogenbrücke)* | `suspendedOrElevated`
`1803` *(Fachwerkbrücke)* | `suspendedOrElevated`
`1804` *(Hängebrücke)* | `suspendedOrElevated`
`1805` *(Pontonbrücke)* | `suspendedOrElevated`
`1806` *(Drehbrücke)* | `suspendedOrElevated`
`1807` *(Hebebrücke)* | `suspendedOrElevated`
`1808` *(Zugbrücke)* | `suspendedOrElevated`
`1820` *(Steg)* | `suspendedOrElevated`
`1830` *(Hochbahn, Hochstraße)* | `suspendedOrElevated`
`1890` *(Schleusenkammer)* | `suspendedOrElevated`
`2030` *(Staumauer)* | `suspendedOrElevated`
`2040` *(Staudamm)* | `suspendedOrElevated`
`2050` *(Wehr)* | `suspendedOrElevated`
`2060` *(Sicherheitstor)* | `suspendedOrElevated`
`2080` *(Sperrwerk)* | `suspendedOrElevated`
`1870` *(Tunnel, Unterführung)* | `underground`
`2010` *(Durchlass)* | `underground`
`2011` *(Rohrdurchlass)* | `underground`
`2012` *(Düker)* | `underground`
`2070` *(Siel)* | `underground`
`2090` *(Schöpfwerk)* | `underground`

Für alle anderen `bauwerksfunktion`en, Referenzen auf andere Objekte oder auch bei Nicht-Vorhandensein von Referenzen wird der Wert `onGroundSurface` angenommen. Bei mehreren verschiedenen Referenzen haben `suspendedOrElevated` und `underground` Vorrang vor `onGroundSurface`.</documentation>
    </cell>
    <cell relation="eu.esdihumboldt.hale.align.rename" id="C45ffdd0a-d3e1-4d96-80f1-f9e2f11f8e52" priority="normal">
        <source>
            <property>
                <type name="AX_FlugverkehrsanlageType" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                <child name="bezeichnung" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
            </property>
        </source>
        <target>
            <property>
                <type name="TaxiwayAreaType" ns="http://inspire.ec.europa.eu/schemas/tn-a/4.0"/>
                <child name="designator" ns="http://inspire.ec.europa.eu/schemas/tn-a/4.0"/>
            </property>
        </target>
        <parameter value="false" name="ignoreNamespaces"/>
        <parameter value="false" name="structuralRename"/>
    </cell>
    <cell relation="eu.esdihumboldt.hale.align.assign" id="Cfba859bc-4b9f-4701-b28c-dc64ff12f28e" priority="normal">
        <target>
            <property>
                <type name="TaxiwayAreaType" ns="http://inspire.ec.europa.eu/schemas/tn-a/4.0"/>
                <child name="designator" ns="http://inspire.ec.europa.eu/schemas/tn-a/4.0"/>
                <child name="nilReason"/>
            </property>
        </target>
        <parameter value="unknown" name="value"/>
    </cell>
    <cell relation="custom:alignment:adv.inspire.AX_Lagebezeichnung.GeographicalName" id="C013ef1ce-3389-4a12-9e43-299c5877d6dd" priority="normal">
        <source name="lagebezeichnung">
            <property>
                <type name="AX_FlugverkehrType" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                <child name="name" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                <child name="AX_Lagebezeichnung" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
            </property>
        </source>
        <target>
            <property>
                <type name="TransportAreaType" ns="http://inspire.ec.europa.eu/schemas/tn/4.0"/>
                <child name="geographicalName" ns="http://inspire.ec.europa.eu/schemas/tn/4.0"/>
                <child name="GeographicalName" ns="http://inspire.ec.europa.eu/schemas/gn/4.0"/>
            </property>
        </target>
        <documentation>Der Fall das eine verschlüsselte Lagebezeichnung vorliegt kann laut Erfassungskriterium für `AX_Flugverkehr` nicht vorkommen. Die verschlüsselte Lagebezeichnung kann also ignoriert werden.</documentation>
    </cell>
    <cell relation="custom:alignment:adv.inspire.GeographicalName.simple" id="Cc821f68c-572e-4c49-9b2f-c721bb98d6a5" priority="normal">
        <source name="spelling">
            <property>
                <type name="AX_FlugverkehrsanlageType" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                <child name="name" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
            </property>
        </source>
        <target>
            <property>
                <type name="TransportAreaType" ns="http://inspire.ec.europa.eu/schemas/tn/4.0"/>
                <child name="geographicalName" ns="http://inspire.ec.europa.eu/schemas/tn/4.0"/>
                <child name="GeographicalName" ns="http://inspire.ec.europa.eu/schemas/gn/4.0"/>
            </property>
        </target>
    </cell>
    <cell relation="eu.esdihumboldt.hale.align.assign" id="C8a99d139-a728-44e1-99c4-47b1ad65625d" priority="normal">
        <target>
            <property>
                <type name="TransportAreaType" ns="http://inspire.ec.europa.eu/schemas/tn/4.0"/>
                <child name="geographicalName" ns="http://inspire.ec.europa.eu/schemas/tn/4.0"/>
                <child name="nilReason"/>
            </property>
        </target>
        <parameter value="unknown" name="value"/>
    </cell>
    <cell relation="custom:alignment:adv.geometry.simplefeature" id="C062492e7-ff51-4f87-9683-29be0fae5741" priority="normal">
        <source name="geometrie">
            <property>
                <type name="AX_FlugverkehrType" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                <child name="position" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
            </property>
        </source>
        <target>
            <property>
                <type name="TransportAreaType" ns="http://inspire.ec.europa.eu/schemas/tn/4.0"/>
                <child name="geometry" ns="http://inspire.ec.europa.eu/schemas/net/4.0"/>
            </property>
        </target>
    </cell>
    <cell relation="custom:alignment:adv.inspire.id.default" id="C1e56f083-0567-44ba-a80e-9306aa13ba62" priority="normal">
        <source name="id">
            <property>
                <type name="AX_FlugverkehrType" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                <child name="id" ns="http://www.opengis.net/gml/3.2"/>
            </property>
        </source>
        <target>
            <property>
                <type name="TransportAreaType" ns="http://inspire.ec.europa.eu/schemas/tn/4.0"/>
                <child name="id" ns="http://www.opengis.net/gml/3.2"/>
            </property>
        </target>
    </cell>
    <cell relation="custom:alignment:adv.inspire.identifier" id="C56e7652a-27b6-4c1f-bf46-c8613c8fbee5" priority="normal">
        <source name="id">
            <property>
                <type name="AX_FlugverkehrType" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                <child name="id" ns="http://www.opengis.net/gml/3.2"/>
            </property>
        </source>
        <target>
            <property>
                <type name="TransportAreaType" ns="http://inspire.ec.europa.eu/schemas/tn/4.0"/>
                <child name="identifier" ns="http://www.opengis.net/gml/3.2"/>
            </property>
        </target>
    </cell>
    <cell relation="custom:alignment:adv.inspire.id.default" id="C2cc0d75c-81b6-47c7-8476-a51f4bc8d872" priority="normal">
        <source name="id">
            <property>
                <type name="AX_FlugverkehrType" ns="http://www.adv-online.de/namespaces/adv/gid/7.1"/>
                <child name="id" ns="http://www.opengis.net/gml/3.2"/>
            </property>
        </source>
        <target>
            <property>
                <type name="TransportAreaType" ns="http://inspire.ec.europa.eu/schemas/tn/4.0"/>
                <child name="inspireId" ns="http://inspire.ec.europa.eu/schemas/net/4.0"/>
                <child name="Identifier" ns="http://inspire.ec.europa.eu/schemas/base/3.3"/>
                <child name="localId" ns="http://inspire.ec.europa.eu/schemas/base/3.3"/>
            </property>
        </target>
    </cell>
    <cell relation="eu.esdihumboldt.hale.align.assign" id="C59f463b4-e885-4c0d-be10-9372532edeaf" priority="normal">
        <target>
            <property>
                <type name="TransportAreaType" ns="http://inspire.ec.europa.eu/schemas/tn/4.0"/>
                <child name="validFrom" ns="http://inspire.ec.europa.eu/schemas/tn/4.0"/>
                <child name="nilReason"/>
            </property>
        </target>
        <parameter value="other:unpopulated" name="value"/>
    </cell>
    <cell relation="eu.esdihumboldt.hale.align.assign" id="C847695bb-1eeb-4c82-9398-b6cb66a774da" priority="normal">
        <target>
            <property>
                <type name="TransportAreaType" ns="http://inspire.ec.europa.eu/schemas/tn/4.0"/>
                <child name="validTo" ns="http://inspire.ec.europa.eu/schemas/tn/4.0"/>
                <child name="nilReason"/>
            </property>
        </target>
        <parameter value="other:unpopulated" name="value"/>
    </cell>
    <cell relation="eu.esdihumboldt.hale.align.assign" id="Cfcd5b202-e630-44a2-a8bb-44f1b0f24344" priority="normal">
        <target>
            <property>
                <type name="TransportNetworkType" ns="http://inspire.ec.europa.eu/schemas/tn/4.0"/>
                <child name="typeOfTransport" ns="http://inspire.ec.europa.eu/schemas/tn/4.0"/>
            </property>
        </target>
        <parameter value="air" name="value"/>
    </cell>
    <cell relation="eu.esdihumboldt.hale.align.merge" id="Cf9468cc1-4312-4e19-af99-217d1e276e28" priority="normal">
        <source>
            <class>
                <type name="AX_FlugverkehrType" ns="http://www.adv-online.de/namespaces/adv/gid/7.1">
                    <condition lang="CQL">nutzung = '2000'</condition>
                </type>
            </class>
        </source>
        <target>
            <class>
                <type name="UseRestrictionType" ns="http://inspire.ec.europa.eu/schemas/tn-a/4.0"/>
            </class>
        </target>
        <parameter value="{http://www.adv-online.de/namespaces/adv/gid/7.1}position" name="additional_property"/>
        <parameter value="false" name="auto_detect"/>
        <parameter value="{http://www.adv-online.de/namespaces/adv/gid/7.1}nutzung" name="property"/>
    </cell>
    <cell relation="eu.esdihumboldt.hale.align.assign" id="C4185fd7c-c7c8-4b51-ab7b-3667f679859e" priority="normal">
        <target>
            <property>
                <type name="UseRestrictionType" ns="http://inspire.ec.europa.eu/schemas/tn-a/4.0"/>
                <child name="id" ns="http://www.opengis.net/gml/3.2"/>
            </property>
        </target>
        <parameter value="UseRestriction_reservedForMilitary" name="value"/>
    </cell>
    <cell relation="eu.esdihumboldt.cst.functions.groovy" id="C0bdca2a3-eb72-4498-97c5-68ddcbd51e1d" priority="normal">
        <target name="result">
            <property>
                <type name="UseRestrictionType" ns="http://inspire.ec.europa.eu/schemas/tn-a/4.0"/>
                <child name="identifier" ns="http://www.opengis.net/gml/3.2"/>
            </property>
        </target>
        <complexParameter name="script">
            <core:text xmlns:core="http://www.esdi-humboldt.eu/hale/core" xml:space="preserve">
def _ns = _project.vars.INSPIRE_NAMESPACE
def _id = 'UseRestriction_reservedForMilitary'
_target( _ns ? (_ns.endsWith('/') ? _ns : _ns + '/') + _id : _id ) {
	codeSpace( 'http://inspire.ec.europa.eu/ids' )
}
</core:text>
        </complexParameter>
        <parameter value="false" name="variablesAsInstances"/>
        <documentation>Kombinert den INSPIRE namespace mit der ID `UseRestriction_reservedForMilitary`.</documentation>
    </cell>
    <cell relation="eu.esdihumboldt.hale.align.assign" id="C1d289ee8-8964-414a-a3d8-bca9de010f04" priority="normal">
        <target>
            <property>
                <type name="UseRestrictionType" ns="http://inspire.ec.europa.eu/schemas/tn-a/4.0"/>
                <child name="inspireId" ns="http://inspire.ec.europa.eu/schemas/net/4.0"/>
                <child name="Identifier" ns="http://inspire.ec.europa.eu/schemas/base/3.3"/>
                <child name="localId" ns="http://inspire.ec.europa.eu/schemas/base/3.3"/>
            </property>
        </target>
        <parameter value="UseRestriction_reservedForMilitary" name="value"/>
    </cell>
    <cell relation="custom:alignment:adv.inspire.namespace" id="C62dc259c-e645-4697-8d21-c1a982cb98e0" priority="normal">
        <target>
            <property>
                <type name="UseRestrictionType" ns="http://inspire.ec.europa.eu/schemas/tn-a/4.0"/>
                <child name="inspireId" ns="http://inspire.ec.europa.eu/schemas/net/4.0"/>
                <child name="Identifier" ns="http://inspire.ec.europa.eu/schemas/base/3.3"/>
                <child name="namespace" ns="http://inspire.ec.europa.eu/schemas/base/3.3"/>
            </property>
        </target>
    </cell>
    <cell relation="eu.esdihumboldt.hale.align.assign" id="C7228aae4-6bff-4a55-a28b-a2f3b70ba778" priority="normal">
        <target>
            <property>
                <type name="UseRestrictionType" ns="http://inspire.ec.europa.eu/schemas/tn-a/4.0"/>
                <child name="restriction" ns="http://inspire.ec.europa.eu/schemas/tn-a/4.0"/>
                <child name="href" ns="http://www.w3.org/1999/xlink"/>
            </property>
        </target>
        <parameter value="http://inspire.ec.europa.eu/codelist/AirUseRestrictionValue/reservedForMilitary" name="value"/>
    </cell>
    <modifier cell="ba1:C1eb2d011-34d1-4077-8388-f7fbdb1659b9">
        <transformation mode="disabled"/>
    </modifier>
</alignment>
